{"title": "Asset Transfer API Reference", "slug": "develop-toolkit-interoperability-asset-transfer-api-reference", "raw_md_url": "https://raw.githubusercontent.com/polkadot-developers/polkadot-docs/dawn/improved-llms/.ai/pages/develop-toolkit-interoperability-asset-transfer-api-reference.md", "html_url": "https://docs.polkadot.com/develop/toolkit/interoperability/asset-transfer-api/reference/", "categories": ["Reference", "Dapps"], "description": "Explore the Asset Transfer API Reference for comprehensive details on methods, data types, and functionalities. Essential for cross-chain asset transfers.", "content": "# Asset Transfer API Reference\n\n<br>\n<div class=\"grid cards\" markdown>\n-   :octicons-download-16:{ .lg .middle } __Install the Asset Transfer API__\n\n    ---\n\n    Learn how to install [`asset-transfer-api`](https://github.com/paritytech/asset-transfer-api){target=\\_blank} into a new or existing project.\n\n    <br>\n    [:octicons-arrow-right-24: Get started](/develop/toolkit/interoperability/asset-transfer-api/overview/#install-asset-transfer-api){target=\\_blank}\n\n-   :octicons-code-16:{ .lg .middle } __Dive in with a tutorial__\n\n    ---\n\n    Ready to start coding? Follow along with a step-by-step tutorial.\n\n    <br>\n    [:octicons-arrow-right-24: How to use the Asset Transfer API](/develop/toolkit/interoperability/asset-transfer-api/overview/#examples)\n</div>\n<br>\n\n\n## Asset Transfer API Class\n\nHolds open an API connection to a specified chain within the `ApiPromise` to help construct transactions for assets and estimate fees.\n\nFor a more in-depth explanation of the Asset Transfer API class structure, check the [source code](https://github.com/paritytech/asset-transfer-api/blob/v1.0.0/src/AssetTransferApi.ts#L128){target=\\_blank}.\n\n### Methods\n\n#### Create Transfer Transaction\n\nGenerates an XCM transaction for transferring assets between chains. It simplifies the process by inferring what type of transaction is required given the inputs, ensuring that the assets are valid, and that the transaction details are correctly formatted.\n\nAfter obtaining the transaction, you must handle the signing and submission process separately.\n\n```ts\n-public async createTransferTransaction<T extends Format>(\n\t\tdestChainId: string,\n\t\tdestAddr: string,\n\t\tassetIds: string[],\n\t\tamounts: string[],\n\t\topts: TransferArgsOpts<T> = {},\n\t): Promise<TxResult<T>> {\n```\n\n??? interface \"Request parameters\"\n\n    `destChainId` ++\"string\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    ID of the destination chain (`'0'` for relay chain, other values for parachains).\n\n    ---\n\n    `destAddr` ++\"string\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Address of the recipient account on the destination chain.\n\n    ---\n\n    `assetIds` ++\"string[]\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Array of asset IDs to be transferred.\n\n    When asset IDs are provided, the API dynamically selects the appropriate pallet for the current chain to handle these specific assets. If the array is empty, the API defaults to using the `balances` pallet.\n\n    ---\n\n    `amounts` ++\"string[]\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Array of amounts corresponding to each asset in `assetIds`.\n\n    ---\n\n    `opts` ++\"TransferArgsOpts<T>\"++\n\n    -Options for customizing the claim assets transaction. These options allow you to specify the transaction format, fee payment details, weight limits, XCM versions, and more.\n\n??? child \"Show more\"\n\n    `format` ++\"T extends Format\"++ \n        \n    Specifies the format for returning a transaction.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n    ---\n\n    `paysWithFeeOrigin` ++\"string\"++\n    \n    The Asset ID to pay fees on the current common good parachain. The defaults are as follows:\n\n    - **Polkadot Asset Hub**: `'DOT'`\n    - **Kusama Asset Hub**: `'KSM'`\n\n    ---\n\n    `paysWithFeeDest` ++\"string\"++\n    \n    Asset ID to pay fees on the destination parachain.\n\n    ---\n\n    `weightLimit` ++\"{ refTime?: string, proofSize?: string }\"++\n    \n    Custom weight limit option. If not provided, it will default to unlimited.\n\n    ---\n\n    `xcmVersion` ++\"number\"++\n    \n    Sets the XCM version for message construction. If this is not present a supported version will be queried, and if there is no supported version a safe version will be queried.\n\n    ---\n\n    `keepAlive` ++\"boolean\"++\n    \n    Enables `transferKeepAlive` for local asset transfers. For creating local asset transfers, if `true` this will allow for a `transferKeepAlive` as opposed to a `transfer`.\n\n    ---\n\n    `transferLiquidToken` ++\"boolean\"++\n    \n    Declares if this will transfer liquidity tokens. Default is `false`.\n\n    ---\n\n    `assetTransferType` ++\"string\"++\n    \n    The XCM transfer type used to transfer assets. The `AssetTransferType` type defines the possible values for this parameter.\n\n    ??? child \"Type `AssetTransferType`\"\n\n        ```ts\n        -export type AssetTransferType = LocalReserve | DestinationReserve | Teleport | RemoteReserve;\n        ```\n        \n        !!! note\n            To use the `assetTransferType` parameter, which is a string, you should use the `AssetTransferType` type as if each of its variants are strings. For example: `assetTransferType = 'LocalReserve'`.\n\n\n    ---\n\n    `remoteReserveAssetTransferTypeLocation` ++\"string\"++\n    \n    The remove reserve location for the XCM transfer. Should be provided when specifying an `assetTransferType` of `RemoteReserve`.\n\n    ---\n\n    `feesTransferType` ++\"string\"++\n    \n    XCM TransferType used to pay fees for XCM transfer. The `AssetTransferType` type defines the possible values for this parameter.\n\n    ??? child \"Type `AssetTransferType`\"\n\n        ```ts\n        -export type AssetTransferType = LocalReserve | DestinationReserve | Teleport | RemoteReserve;\n        ```\n        \n        !!! note\n            To use the `feesTransferType` parameter, which is a string, you should use the `AssetTransferType` type as if each of its variants are strings. For example: `feesTransferType = 'LocalReserve'`.\n\n    ---\n\n    `remoteReserveFeesTransferTypeLocation` ++\"string\"++\n    \n    The remote reserve location for the XCM transfer fees. Should be provided when specifying a `feesTransferType` of `RemoteReserve`.\n\n    ---\n\n    `customXcmOnDest` ++\"string\"++\n    \n    A custom XCM message to be executed on the destination chain. Should be provided if a custom XCM message is needed after transferring assets. Defaults to:\n\n    ```bash\n    Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])\n    ```\n\n\n??? interface \"Response parameters\"\n\n    ++\"Promise<TxResult<T>\"++\n\n    -A promise containing the result of constructing the transaction.\n\n??? child \"Show more\"\n\n    `dest` ++\"string\"++\n\n    The destination `specName` of the transaction.\n\n    ---\n\n    `origin` ++\"string\"++\n\n    The origin `specName` of the transaction.\n\n    ---\n\n    `format` ++\"Format | 'local'\"++\n\n    The format type the transaction is outputted in.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n    ---\n\n    `xcmVersion` ++\"number | null\"++\n\n    The XCM version that was used to construct the transaction.\n\n    ---\n\n    `direction` ++\"Direction | 'local'\"++\n\n    The direction of the cross-chain transfer.\n\n    ??? child \"Enum `Direction` values\"\n\n        `Local`\n\n        Local transaction.\n\n        ---\n\n        `SystemToPara`\n\n        System parachain to parachain.\n\n        ---\n\n        `SystemToRelay`\n\n        System paracahin to system relay chain.\n\n        ---\n\n        `SystemToSystem`\n\n        System parachain to System parachain chain.\n\n        ---\n\n        `SystemToBridge`\n\n        System parachain to an external `GlobalConsensus` chain.\n        \n        ---\n\n        `ParaToPara`\n\n        Parachain to Parachain.\n\n        ---\n\n        `ParaToRelay`\n\n        Parachain to Relay chain.\n\n        ---\n        \n        `ParaToSystem`\n\n        Parachain to System parachain.\n\n        ---\n\n        `RelayToSystem`\n\n        Relay to System Parachain.\n\n        ---\n\n        `RelayToPara`\n\n        Relay chain to Parachain.\n\n        ---\n\n        `RelayToBridge`\n\n        Relay chain to an external `GlobalConsensus` chain.\n\n    `method` ++\"Methods\"++\n\n    The method used in the transaction.\n\n    ??? child \"Type `Methods`\"\n\n        ```ts\n        -export type Methods =\n\t| LocalTransferTypes\n\t| 'transferAssets'\n\t| 'transferAssetsUsingTypeAndThen'\n\t| 'limitedReserveTransferAssets'\n\t| 'limitedTeleportAssets'\n\t| 'transferMultiasset'\n\t| 'transferMultiassets'\n\t| 'transferMultiassetWithFee'\n\t| 'claimAssets';\n        ```\n\n        ??? child \"Type `LocalTransferTypes`\"\n\n\n            ```ts\n            -export type LocalTransferTypes =\n\t| 'assets::transfer'\n\t| 'assets::transferKeepAlive'\n\t| 'assets::transferAll'\n\t| 'foreignAssets::transfer'\n\t| 'foreignAssets::transferKeepAlive'\n\t| 'foreignAssets::transferAll'\n\t| 'balances::transfer'\n\t| 'balances::transferKeepAlive'\n\t| 'balances::transferAll'\n\t| 'poolAssets::transfer'\n\t| 'poolAssets::transferKeepAlive'\n\t| 'poolAssets::transferAll'\n\t| 'tokens::transfer'\n\t| 'tokens::transferKeepAlive'\n\t| 'tokens::transferAll';\n            ```\n\n    ---\n\n    `tx` ++\"ConstructedFormat<T>\"++\n\n    The constructed transaction.\n\n    ??? child \"Type `ConstructedFormat<T>`\"\n\n        ```ts\n        -export type ConstructedFormat<T> = T extends 'payload'\n\t? GenericExtrinsicPayload\n\t: T extends 'call'\n\t\t? `0x${string}`\n\t\t: T extends 'submittable'\n\t\t\t? SubmittableExtrinsic<'promise', ISubmittableResult>\n\t\t\t: never;\n        ```\n\n        The `ConstructedFormat` type is a conditional type that returns a specific type based on the value of the TxResult `format` field.\n\n        - **Payload format**: If the format field is set to `'payload'`, the `ConstructedFormat` type will return a [`GenericExtrinsicPayload`](https://github.com/polkadot-js/api/blob/v15.8.1/packages/types/src/extrinsic/ExtrinsicPayload.ts#L87){target=\\_blank}.\n        - **Call format**: If the format field is set to `'call'`, the `ConstructedFormat` type will return a hexadecimal string (`0x${string}`). This is the encoded representation of the extrinsic call.\n        - **Submittable format**: If the format field is set to `'submittable'`, the `ConstructedFormat` type will return a [`SubmittableExtrinsic`](https://github.com/polkadot-js/api/blob/v15.8.1/packages/api-base/src/types/submittable.ts#L56){target=\\_blank}. This is a Polkadot.js type that represents a transaction that can be submitted to the blockchain.\n\n\n??? interface \"Example\"\n\n    ***Request***\n\n    ```ts\n    -import {\n  AssetTransferApi,\n  constructApiPromise,\n} from '@substrate/asset-transfer-api';\n\nasync function main() {\n  const { api, specName, safeXcmVersion } = await constructApiPromise(\n    'wss://wss.api.moonbeam.network',\n  );\n  const assetsApi = new AssetTransferApi(api, specName, safeXcmVersion);\n\n  let callInfo;\n  try {\n    callInfo = await assetsApi.createTransferTransaction(\n      '2004',\n      '0xF977814e90dA44bFA03b6295A0616a897441aceC',\n      [],\n      ['1000000000000000000'],\n      {\n        format: 'call',\n        keepAlive: true,\n      },\n    );\n\n    console.log(`Call data:\\n${JSON.stringify(callInfo, null, 4)}`);\n  } catch (e) {\n    console.error(e);\n    throw Error(e as string);\n  }\n}\n\nmain()\n  .catch((err) => console.error(err))\n  .finally(() => process.exit());\n\n    ```\n\n    ***Response***\n\n    -<div id=\"termynal\" data-termynal>\n    <span data-ty>Call data:</span>\n    <span data-ty>{</span>\n    <span data-ty>    \"origin\": \"moonbeam\",</span>\n    <span data-ty>    \"dest\": \"moonbeam\",</span>\n    <span data-ty>    \"direction\": \"local\",</span>\n    <span data-ty>    \"xcmVersion\": null,</span>\n    <span data-ty>    \"method\": \"balances::transferKeepAlive\",</span>\n    <span data-ty>    \"format\": \"call\",</span>\n    <span data-ty>    \"tx\": \"0x0a03f977814e90da44bfa03b6295a0616a897441acec821a0600\"</span>\n    <span data-ty>}</span>\n<div>\n\n#### Claim Assets\n\nCreates a local XCM transaction to retrieve trapped assets. This function can be used to claim assets either locally on a system parachain, on the relay chain, or on any chain that supports the `claimAssets` runtime call.\n\n\n```ts\n-public async claimAssets<T extends Format>(\n\t\tassetIds: string[],\n\t\tamounts: string[],\n\t\tbeneficiary: string,\n\t\topts: TransferArgsOpts<T>,\n\t): Promise<TxResult<T>> {\n```\n\n??? interface \"Request parameters\"\n\n    `assetIds` ++\"string[]\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Array of asset IDs to be claimed from the `AssetTrap`.\n\n    ---\n\n    `amounts` ++\"string[]\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Array of amounts corresponding to each asset in `assetIds`.\n\n    ---\n\n    `beneficiary` ++\"string\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Address of the account to receive the trapped assets.\n\n    ---\n\n    `opts` ++\"TransferArgsOpts<T>\"++\n\n    -Options for customizing the claim assets transaction. These options allow you to specify the transaction format, fee payment details, weight limits, XCM versions, and more.\n\n??? child \"Show more\"\n\n    `format` ++\"T extends Format\"++ \n        \n    Specifies the format for returning a transaction.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n    ---\n\n    `paysWithFeeOrigin` ++\"string\"++\n    \n    The Asset ID to pay fees on the current common good parachain. The defaults are as follows:\n\n    - **Polkadot Asset Hub**: `'DOT'`\n    - **Kusama Asset Hub**: `'KSM'`\n\n    ---\n\n    `paysWithFeeDest` ++\"string\"++\n    \n    Asset ID to pay fees on the destination parachain.\n\n    ---\n\n    `weightLimit` ++\"{ refTime?: string, proofSize?: string }\"++\n    \n    Custom weight limit option. If not provided, it will default to unlimited.\n\n    ---\n\n    `xcmVersion` ++\"number\"++\n    \n    Sets the XCM version for message construction. If this is not present a supported version will be queried, and if there is no supported version a safe version will be queried.\n\n    ---\n\n    `keepAlive` ++\"boolean\"++\n    \n    Enables `transferKeepAlive` for local asset transfers. For creating local asset transfers, if `true` this will allow for a `transferKeepAlive` as opposed to a `transfer`.\n\n    ---\n\n    `transferLiquidToken` ++\"boolean\"++\n    \n    Declares if this will transfer liquidity tokens. Default is `false`.\n\n    ---\n\n    `assetTransferType` ++\"string\"++\n    \n    The XCM transfer type used to transfer assets. The `AssetTransferType` type defines the possible values for this parameter.\n\n    ??? child \"Type `AssetTransferType`\"\n\n        ```ts\n        -export type AssetTransferType = LocalReserve | DestinationReserve | Teleport | RemoteReserve;\n        ```\n        \n        !!! note\n            To use the `assetTransferType` parameter, which is a string, you should use the `AssetTransferType` type as if each of its variants are strings. For example: `assetTransferType = 'LocalReserve'`.\n\n\n    ---\n\n    `remoteReserveAssetTransferTypeLocation` ++\"string\"++\n    \n    The remove reserve location for the XCM transfer. Should be provided when specifying an `assetTransferType` of `RemoteReserve`.\n\n    ---\n\n    `feesTransferType` ++\"string\"++\n    \n    XCM TransferType used to pay fees for XCM transfer. The `AssetTransferType` type defines the possible values for this parameter.\n\n    ??? child \"Type `AssetTransferType`\"\n\n        ```ts\n        -export type AssetTransferType = LocalReserve | DestinationReserve | Teleport | RemoteReserve;\n        ```\n        \n        !!! note\n            To use the `feesTransferType` parameter, which is a string, you should use the `AssetTransferType` type as if each of its variants are strings. For example: `feesTransferType = 'LocalReserve'`.\n\n    ---\n\n    `remoteReserveFeesTransferTypeLocation` ++\"string\"++\n    \n    The remote reserve location for the XCM transfer fees. Should be provided when specifying a `feesTransferType` of `RemoteReserve`.\n\n    ---\n\n    `customXcmOnDest` ++\"string\"++\n    \n    A custom XCM message to be executed on the destination chain. Should be provided if a custom XCM message is needed after transferring assets. Defaults to:\n\n    ```bash\n    Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])\n    ```\n\n\n??? interface \"Response parameters\"\n\n    ++\"Promise<TxResult<T>>\"++\n\n    -A promise containing the result of constructing the transaction.\n\n??? child \"Show more\"\n\n    `dest` ++\"string\"++\n\n    The destination `specName` of the transaction.\n\n    ---\n\n    `origin` ++\"string\"++\n\n    The origin `specName` of the transaction.\n\n    ---\n\n    `format` ++\"Format | 'local'\"++\n\n    The format type the transaction is outputted in.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n    ---\n\n    `xcmVersion` ++\"number | null\"++\n\n    The XCM version that was used to construct the transaction.\n\n    ---\n\n    `direction` ++\"Direction | 'local'\"++\n\n    The direction of the cross-chain transfer.\n\n    ??? child \"Enum `Direction` values\"\n\n        `Local`\n\n        Local transaction.\n\n        ---\n\n        `SystemToPara`\n\n        System parachain to parachain.\n\n        ---\n\n        `SystemToRelay`\n\n        System paracahin to system relay chain.\n\n        ---\n\n        `SystemToSystem`\n\n        System parachain to System parachain chain.\n\n        ---\n\n        `SystemToBridge`\n\n        System parachain to an external `GlobalConsensus` chain.\n        \n        ---\n\n        `ParaToPara`\n\n        Parachain to Parachain.\n\n        ---\n\n        `ParaToRelay`\n\n        Parachain to Relay chain.\n\n        ---\n        \n        `ParaToSystem`\n\n        Parachain to System parachain.\n\n        ---\n\n        `RelayToSystem`\n\n        Relay to System Parachain.\n\n        ---\n\n        `RelayToPara`\n\n        Relay chain to Parachain.\n\n        ---\n\n        `RelayToBridge`\n\n        Relay chain to an external `GlobalConsensus` chain.\n\n    `method` ++\"Methods\"++\n\n    The method used in the transaction.\n\n    ??? child \"Type `Methods`\"\n\n        ```ts\n        -export type Methods =\n\t| LocalTransferTypes\n\t| 'transferAssets'\n\t| 'transferAssetsUsingTypeAndThen'\n\t| 'limitedReserveTransferAssets'\n\t| 'limitedTeleportAssets'\n\t| 'transferMultiasset'\n\t| 'transferMultiassets'\n\t| 'transferMultiassetWithFee'\n\t| 'claimAssets';\n        ```\n\n        ??? child \"Type `LocalTransferTypes`\"\n\n\n            ```ts\n            -export type LocalTransferTypes =\n\t| 'assets::transfer'\n\t| 'assets::transferKeepAlive'\n\t| 'assets::transferAll'\n\t| 'foreignAssets::transfer'\n\t| 'foreignAssets::transferKeepAlive'\n\t| 'foreignAssets::transferAll'\n\t| 'balances::transfer'\n\t| 'balances::transferKeepAlive'\n\t| 'balances::transferAll'\n\t| 'poolAssets::transfer'\n\t| 'poolAssets::transferKeepAlive'\n\t| 'poolAssets::transferAll'\n\t| 'tokens::transfer'\n\t| 'tokens::transferKeepAlive'\n\t| 'tokens::transferAll';\n            ```\n\n    ---\n\n    `tx` ++\"ConstructedFormat<T>\"++\n\n    The constructed transaction.\n\n    ??? child \"Type `ConstructedFormat<T>`\"\n\n        ```ts\n        -export type ConstructedFormat<T> = T extends 'payload'\n\t? GenericExtrinsicPayload\n\t: T extends 'call'\n\t\t? `0x${string}`\n\t\t: T extends 'submittable'\n\t\t\t? SubmittableExtrinsic<'promise', ISubmittableResult>\n\t\t\t: never;\n        ```\n\n        The `ConstructedFormat` type is a conditional type that returns a specific type based on the value of the TxResult `format` field.\n\n        - **Payload format**: If the format field is set to `'payload'`, the `ConstructedFormat` type will return a [`GenericExtrinsicPayload`](https://github.com/polkadot-js/api/blob/v15.8.1/packages/types/src/extrinsic/ExtrinsicPayload.ts#L87){target=\\_blank}.\n        - **Call format**: If the format field is set to `'call'`, the `ConstructedFormat` type will return a hexadecimal string (`0x${string}`). This is the encoded representation of the extrinsic call.\n        - **Submittable format**: If the format field is set to `'submittable'`, the `ConstructedFormat` type will return a [`SubmittableExtrinsic`](https://github.com/polkadot-js/api/blob/v15.8.1/packages/api-base/src/types/submittable.ts#L56){target=\\_blank}. This is a Polkadot.js type that represents a transaction that can be submitted to the blockchain.\n\n\n??? interface \"Example\"\n\n    ***Request***\n\n    ```ts\n    -import {\n  AssetTransferApi,\n  constructApiPromise,\n} from '@substrate/asset-transfer-api';\n\nasync function main() {\n  const { api, specName, safeXcmVersion } = await constructApiPromise(\n    'wss://westend-rpc.polkadot.io',\n  );\n  const assetsApi = new AssetTransferApi(api, specName, safeXcmVersion);\n\n  let callInfo;\n  try {\n    callInfo = await assetsApi.claimAssets(\n      [\n        `{\"parents\":\"0\",\"interior\":{\"X2\":[{\"PalletInstance\":\"50\"},{\"GeneralIndex\":\"1984\"}]}}`,\n      ],\n      ['1000000000000'],\n      '0xf5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b',\n      {\n        format: 'call',\n        xcmVersion: 2,\n      },\n    );\n\n    console.log(`Call data:\\n${JSON.stringify(callInfo, null, 4)}`);\n  } catch (e) {\n    console.error(e);\n    throw Error(e as string);\n  }\n}\n\nmain()\n  .catch((err) => console.error(err))\n  .finally(() => process.exit());\n\n    ```\n\n    ***Response***\n\n    -<div id=\"termynal\" data-termynal>\n    <span data-ty>Call data:</span>\n    <span data-ty>{</span>\n    <span data-ty>    \"origin\": \"0\",</span>\n    <span data-ty>    \"dest\": \"westend\",</span>\n    <span data-ty>    \"direction\": \"local\",</span>\n    <span data-ty>    \"xcmVersion\": 2,</span>\n    <span data-ty>    \"method\": \"claimAssets\",</span>\n    <span data-ty>    \"format\": \"call\",</span>\n    <span data-ty>    \"tx\": \"0x630c0104000002043205011f00070010a5d4e80100010100f5d5714c084c112843aca74f8c498da06cc5a2d63153b825189baa51043b1f0b\"</span>\n    <span data-ty>}</span>\n<div>\n\n\n#### Decode Extrinsic\n\nDecodes the hex of an extrinsic into a string readable format.\n\n```ts\n-public decodeExtrinsic<T extends Format>(encodedTransaction: string, format: T): string {\n```\n\n??? interface \"Request parameters\"\n\n    `encodedTransaction` ++\"string\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    A hex encoded extrinsic.\n\n    ---\n\n    `format` ++\"T extends Format\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    Specifies the format for returning a transaction.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n??? interface \"Response parameters\"\n\n    ++\"string\"++\n\n    Decoded extrinsic in string readable format.\n\n??? interface \"Example\"\n\n    ***Request***\n\n    ```ts\n    -import {\n  AssetTransferApi,\n  constructApiPromise,\n} from '@substrate/asset-transfer-api';\n\nasync function main() {\n  const { api, specName, safeXcmVersion } = await constructApiPromise(\n    'wss://wss.api.moonbeam.network',\n  );\n  const assetsApi = new AssetTransferApi(api, specName, safeXcmVersion);\n\n  const encodedExt = '0x0a03f977814e90da44bfa03b6295a0616a897441acec821a0600';\n\n  try {\n    const decodedExt = assetsApi.decodeExtrinsic(encodedExt, 'call');\n    console.log(\n      `Decoded tx:\\n ${JSON.stringify(JSON.parse(decodedExt), null, 4)}`,\n    );\n  } catch (e) {\n    console.error(e);\n    throw Error(e as string);\n  }\n}\n\nmain()\n  .catch((err) => console.error(err))\n  .finally(() => process.exit());\n\n    ```\n\n    ***Response***\n\n    -<div id='termynal' data-termynal>\n\t<span data-ty>Decoded tx:</span>\n\t<span data-ty> {</span>\n\t<span data-ty>    \"args\": {</span>\n\t<span data-ty>        \"dest\": \"0xF977814e90dA44bFA03b6295A0616a897441aceC\",</span>\n\t<span data-ty>        \"value\": \"100,000\"</span>\n\t<span data-ty>    },</span>\n\t<span data-ty>    \"method\": \"transferKeepAlive\",</span>\n\t<span data-ty>    \"section\": \"balances\"</span>\n\t<span data-ty>}</span>\n</div>\n\n#### Fetch Fee Info\n\nFetch estimated fee information for an extrinsic.\n\n```ts\n-public async fetchFeeInfo<T extends Format>(\n\t\ttx: ConstructedFormat<T>,\n\t\tformat: T,\n\t): Promise<RuntimeDispatchInfo | RuntimeDispatchInfoV1 | null> {\n```\n\n??? interface \"Request parameters\"\n\n    `tx` ++\"ConstructedFormat<T>\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    The constructed transaction.\n\n    ??? child \"Type `ConstructedFormat<T>`\"\n\n        ```ts\n        -export type ConstructedFormat<T> = T extends 'payload'\n\t? GenericExtrinsicPayload\n\t: T extends 'call'\n\t\t? `0x${string}`\n\t\t: T extends 'submittable'\n\t\t\t? SubmittableExtrinsic<'promise', ISubmittableResult>\n\t\t\t: never;\n        ```\n\n        The `ConstructedFormat` type is a conditional type that returns a specific type based on the value of the TxResult `format` field.\n\n        - **Payload format**: If the format field is set to `'payload'`, the `ConstructedFormat` type will return a [`GenericExtrinsicPayload`](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/extrinsic/ExtrinsicPayload.ts#L87){target=\\_blank}.\n        - **Call format**: If the format field is set to `'call'`, the `ConstructedFormat` type will return a hexadecimal string (`0x${string}`). This is the encoded representation of the extrinsic call.\n        - **Submittable format**: If the format field is set to `'submittable'`, the `ConstructedFormat` type will return a [`SubmittableExtrinsic`](https://github.com/polkadot-js/api/blob/v16.2.2/packages/api-base/src/types/submittable.ts#L56){target=\\_blank}. This is a Polkadot.js type that represents a transaction that can be submitted to the blockchain.\n\n    ---\n\n    `format` ++\"T extends Format\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Specifies the format for returning a transaction.\n\n    ??? child \"Type `Format`\"\n\n        ```ts\n        -export type Format = 'payload' | 'call' | 'submittable';\n        ```\n\n??? interface \"Response parameters\"\n\n    ++\"Promise<RuntimeDispatchInfo | RuntimeDispatchInfoV1 | null>\"++\n\n    A promise containing the estimated fee information for the provided extrinsic.\n\n    ??? child \"Type `RuntimeDispatchInfo`\"\n\n        ```ts\n        export interface RuntimeDispatchInfo extends Struct {\n          readonly weight: Weight;\n          readonly class: DispatchClass;\n          readonly partialFee: Balance;\n        }\n        ```\n\n        For more information on the underlying types and fields of `RuntimeDispatchInfo`, check the [`RuntimeDispatchInfo`](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/interfaces/payment/types.ts#L21){target=\\_blank} source code.\n\n    ??? child \"Type `RuntimeDispatchInfoV1`\"\n\n        ```ts\n        export interface RuntimeDispatchInfoV1 extends Struct {\n          readonly weight: WeightV1;\n          readonly class: DispatchClass;\n          readonly partialFee: Balance;\n        }\n        ```\n\n        For more information on the underlying types and fields of `RuntimeDispatchInfoV1`, check the [`RuntimeDispatchInfoV1`](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/interfaces/payment/types.ts#L28){target=\\_blank} source code.\n\n??? interface \"Example\"\n\n    ***Request***\n\n    ```ts\n    -import {\n  AssetTransferApi,\n  constructApiPromise,\n} from '@substrate/asset-transfer-api';\n\nasync function main() {\n  const { api, specName, safeXcmVersion } = await constructApiPromise(\n    'wss://wss.api.moonbeam.network',\n  );\n  const assetsApi = new AssetTransferApi(api, specName, safeXcmVersion);\n\n  const encodedExt = '0x0a03f977814e90da44bfa03b6295a0616a897441acec821a0600';\n\n  try {\n    const decodedExt = await assetsApi.fetchFeeInfo(encodedExt, 'call');\n    console.log(`Fee info:\\n${JSON.stringify(decodedExt, null, 4)}`);\n  } catch (e) {\n    console.error(e);\n    throw Error(e as string);\n  }\n}\n\nmain()\n  .catch((err) => console.error(err))\n  .finally(() => process.exit());\n\n    ```\n\n    ***Response***\n\n    -<div id='termynal' data-termynal>\n    <span data-ty>Fee info:</span>\n    <span data-ty>{</span>\n    <span data-ty>    \"weight\": {</span>\n    <span data-ty>        \"refTime\": 163777000,</span>\n    <span data-ty>        \"proofSize\": 3581</span>\n    <span data-ty>    },</span>\n    <span data-ty>    \"class\": \"Normal\",</span>\n    <span data-ty>    \"partialFee\": 0</span>\n    <span data-ty>}</span>\n</div>\n"}
{"title": "Glossary", "slug": "polkadot-protocol-glossary", "raw_md_url": "https://raw.githubusercontent.com/polkadot-developers/polkadot-docs/dawn/improved-llms/.ai/pages/polkadot-protocol-glossary.md", "html_url": "https://docs.polkadot.com/polkadot-protocol/glossary/", "categories": ["Reference"], "description": "Glossary of terms used within the Polkadot ecosystem, Polkadot SDK, its subsequent libraries, and other relevant Web3 terminology.", "content": "# Glossary\n\nKey definitions, concepts, and terminology specific to the Polkadot ecosystem are included here.\n\nAdditional glossaries from around the ecosystem you might find helpful:\n\n- [Polkadot Wiki Glossary](https://wiki.polkadot.com/general/glossary){target=\\_blank}\n- [Polkadot SDK Glossary](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/glossary/index.html){target=\\_blank}\n\n## Authority\n\nThe role in a blockchain that can participate in consensus mechanisms. \n\n- **[GRANDPA](#grandpa)**: The authorities vote on chains they consider final.\n- **[Blind Assignment of Blockchain Extension](#blind-assignment-of-blockchain-extension-babe) (BABE)**: The authorities are also [block authors](#block-author).\n\nAuthority sets can be used as a basis for consensus mechanisms such as the [Nominated Proof of Stake (NPoS)](#nominated-proof-of-stake-npos) protocol.\n\n## Authority Round (Aura)\n\nA deterministic [consensus](#consensus) protocol where block production is limited to a rotating list of [authorities](#authority) that take turns creating blocks. In authority round (Aura) consensus, most online authorities are assumed to be honest. It is often used in combination with [GRANDPA](#grandpa) as a [hybrid consensus](#hybrid-consensus) protocol.\n\nLearn more by reading the official [Aura consensus algorithm](https://openethereum.github.io/Aura){target=\\_blank} wiki article.\n\n## Blind Assignment of Blockchain Extension (BABE)\n\nA [block authoring](#block-author) protocol similar to [Aura](#authority-round-aura), except [authorities](#authority) win [slots](#slot) based on a Verifiable Random Function (VRF) instead of the round-robin selection method. The winning authority can select a chain and submit a new block.\n\nLearn more by reading the official Web3 Foundation [BABE research document](https://research.web3.foundation/Polkadot/protocols/block-production/Babe){target=\\_blank}.\n\n## Block Author\n\nThe node responsible for the creation of a block, also called _block producers_. In a Proof of Work (PoW) blockchain, these nodes are called _miners_.\n\n## Byzantine Fault Tolerance (BFT)\n\nThe ability of a distributed computer network to remain operational if a certain proportion of its nodes or [authorities](#authority) are defective or behaving maliciously. A distributed network is typically considered Byzantine fault tolerant if it can remain functional, with up to one-third of nodes assumed to be defective, offline, actively malicious, and part of a coordinated attack.\n\n### Byzantine Failure\n\nThe loss of a network service due to node failures that exceed the proportion of nodes required to reach consensus.\n\n### Practical Byzantine Fault Tolerance (pBFT)\n\nAn early approach to Byzantine fault tolerance (BFT), practical Byzantine fault tolerance (pBFT) systems tolerate Byzantine behavior from up to one-third of participants.\n\nThe communication overhead for such systems is `O(n²)`, where `n` is the number of nodes (participants) in the system.\n\n### Preimage\n\nA preimage is the data that is input into a hash function to calculate a hash. Since a hash function is a [one-way function](https://en.wikipedia.org/wiki/One-way_function){target=\\_blank}, the output, the hash, cannot be used to reveal the input, the preimage.\n\n## Call\n\nIn the context of pallets containing functions to be dispatched to the runtime, `Call` is an enumeration data type that describes the functions that can be dispatched with one variant per pallet. A `Call` represents a [dispatch](#dispatchable) data structure object.\n\n## Chain Specification \n\nA chain specification file defines the properties required to run a node in an active or new Polkadot SDK-built network. It often contains the initial genesis runtime code, network properties (such as the network's name), the initial state for some pallets, and the boot node list. The chain specification file makes it easy to use a single Polkadot SDK codebase as the foundation for multiple independently configured chains.\n\n## Collator\n\nAn [author](#block-author) of a [parachain](#parachain) network.\nThey aren't [authorities](#authority) in themselves, as they require a [relay chain](#relay-chain) to coordinate [consensus](#consensus).\n\nMore details are found on the [Polkadot Collator Wiki](https://wiki.polkadot.com/learn/learn-collator/){target=\\_blank}.\n\n## Collective\n\nMost often used to refer to an instance of the Collective pallet on Polkadot SDK-based networks such as [Kusama](#kusama) or [Polkadot](#polkadot) if the Collective pallet is part of the FRAME-based runtime for the network.\n\n## Consensus\n\nConsensus is the process blockchain nodes use to agree on a chain's canonical fork. It is composed of [authorship](#block-author), finality, and [fork-choice rule](#fork-choice-rulestrategy). In the Polkadot ecosystem, these three components are usually separate and the term consensus often refers specifically to authorship.\n\nSee also [hybrid consensus](#hybrid-consensus).\n\n## Consensus Algorithm\n\nEnsures a set of [actors](#authority)—who don't necessarily trust each other—can reach an agreement about the state as the result of some computation. Most consensus algorithms assume that up to one-third of the actors or nodes can be [Byzantine fault tolerant](#byzantine-fault-tolerance-bft).\n\nConsensus algorithms are generally concerned with ensuring two properties:\n\n- **Safety**: Indicating that all honest nodes eventually agreed on the state of the chain.\n- **Liveness**: Indicating the ability of the chain to keep progressing.\n\n## Consensus Engine\n\nThe node subsystem responsible for consensus tasks.\n\nFor detailed information about the consensus strategies of the [Polkadot](#polkadot) network, see the [Polkadot Consensus](/polkadot-protocol/architecture/polkadot-chain/pos-consensus/){target=\\_blank} blog series.\n\nSee also [hybrid consensus](#hybrid-consensus).\n\n## Coretime\n\nThe time allocated for utilizing a core, measured in relay chain blocks. There are two types of coretime: *on-demand* and *bulk*.\n\nOn-demand coretime refers to coretime acquired through bidding in near real-time for the validation of a single parachain block on one of the cores reserved specifically for on-demand orders. They are available as an on-demand coretime pool. Set of cores that are available on-demand. Cores reserved through bulk coretime could also be made available in the on-demand coretime pool, in parts or in entirety.\n\nBulk coretime is a fixed duration of continuous coretime represented by an NFT that can be split, shared, or resold. It is managed by the [Broker pallet](https://paritytech.github.io/polkadot-sdk/master/pallet_broker/index.html){target=\\_blank}.\n\n## Development Phrase\n\nA [mnemonic phrase](https://en.wikipedia.org/wiki/Mnemonic#For_numerical_sequences_and_mathematical_operations){target=\\_blank} that is intentionally made public.\n\nWell-known development accounts, such as Alice, Bob, Charlie, Dave, Eve, and Ferdie, are generated from the same secret phrase:\n\n```\nbottom drive obey lake curtain smoke basket hold race lonely fit walk\n```\n\nMany tools in the Polkadot SDK ecosystem, such as [`subkey`](https://github.com/paritytech/polkadot-sdk/tree/polkadot-stable2506/substrate/bin/utils/subkey){target=\\_blank}, allow you to implicitly specify an account using a derivation path such as `//Alice`.\n\n## Digest\n\nAn extensible field of the [block header](#header) that encodes information needed by several actors in a blockchain network, including:\n\n- [Light clients](#light-client) for chain synchronization.\n- Consensus engines for block verification.\n- The runtime itself, in the case of pre-runtime digests.\n\n## Dispatchable\n\nFunction objects that act as the entry points in FRAME [pallets](#pallet). Internal or external entities can call them to interact with the blockchain’s state. They are a core aspect of the runtime logic, handling [transactions](#transaction) and other state-changing operations.\n\n## Events\n\nA means of recording that some particular [state](#state) transition happened.\n\nIn the context of [FRAME](#frame-framework-for-runtime-aggregation-of-modularized-entities), events are composable data types that each [pallet](#pallet) can individually define. Events in FRAME are implemented as a set of transient storage items inspected immediately after a block has been executed and reset during block initialization.\n\n## Executor\n\nA means of executing a function call in a given [runtime](#runtime) with a set of dependencies.\nThere are two orchestration engines in Polkadot SDK, _WebAssembly_ and _native_.\n\n- The _native executor_ uses a natively compiled runtime embedded in the node to execute calls. This is a performance optimization available to up-to-date nodes.\n\n- The _WebAssembly executor_ uses a [Wasm](#webassembly-wasm) binary and a Wasm interpreter to execute calls. The binary is guaranteed to be up-to-date regardless of the version of the blockchain node because it is persisted in the [state](#state) of the Polkadot SDK-based chain.\n\n## Existential Deposit\n\nThe minimum balance an account is allowed to have in the [Balances pallet](https://paritytech.github.io/polkadot-sdk/master/pallet_balances/index.html){target=\\_blank}. Accounts cannot be created with a balance less than the existential deposit amount. \n\nIf an account balance drops below this amount, the Balances pallet uses [a FRAME System API](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.dec_ref){target=\\_blank} to drop its references to that account.\n\nIf the Balances pallet reference to an account is dropped, the account can be [reaped](https://paritytech.github.io/substrate/master/frame_system/pallet/struct.Pallet.html#method.allow_death){target=\\_blank}.\n\n## Extrinsic\n\nA general term for data that originates outside the runtime, is included in a block, and leads to some action. This includes user-initiated transactions and inherent transactions placed into the block by the block builder.\n\nIt is a SCALE-encoded array typically consisting of a version number, signature, and varying data types indicating the resulting runtime function to be called. Extrinsics can take two forms: [inherents](#inherent-transactions) and [transactions](#transaction). \n\nFor more technical details, see the [Polkadot spec](https://spec.polkadot.network/id-extrinsics){target=\\_blank}.\n\n## Fork Choice Rule/Strategy\n\nA fork choice rule or strategy helps determine which chain is valid when reconciling several network forks. A common fork choice rule is the [longest chain](https://paritytech.github.io/polkadot-sdk/master/sc_consensus/struct.LongestChain.html){target=\\_blank}, in which the chain with the most blocks is selected.\n\n## FRAME (Framework for Runtime Aggregation of Modularized Entities)\n\nEnables developers to create blockchain [runtime](#runtime) environments from a modular set of components called [pallets](#pallet). It utilizes a set of procedural macros to construct runtimes.\n\n[Visit the Polkadot SDK docs for more details on FRAME.](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/polkadot_sdk/frame_runtime/index.html){target=\\_blank}\n\n## Full Node\n\nA node that prunes historical states, keeping only recently finalized block states to reduce storage needs. Full nodes provide current chain state access and allow direct submission and validation of [extrinsics](#extrinsic), maintaining network decentralization.\n\n## Genesis Configuration\n\nA mechanism for specifying the initial state of a blockchain. By convention, this initial state or first block is commonly referred to as the genesis state or genesis block. The genesis configuration for Polkadot SDK-based chains is accomplished by way of a [chain specification](#chain-specification) file.\n\n## GRANDPA\n\nA deterministic finality mechanism for blockchains that is implemented in the [Rust](https://www.rust-lang.org/){target=\\_blank} programming language.\n\nThe [formal specification](https://github.com/w3f/consensus/blob/master/pdf/grandpa-old.pdf){target=\\_blank} is maintained by the [Web3 Foundation](https://web3.foundation/){target=\\_blank}.\n\n## Header\n\nA structure that aggregates the information used to summarize a block. Primarily, it consists of cryptographic information used by [light clients](#light-client) to get minimally secure but very efficient chain synchronization.\n\n## Hybrid Consensus\n\nA blockchain consensus protocol that consists of independent or loosely coupled mechanisms for [block production](#block-author) and finality.\n\nHybrid consensus allows the chain to grow as fast as probabilistic consensus protocols, such as [Aura](#authority-round-aura), while maintaining the same level of security as deterministic finality consensus protocols, such as [GRANDPA](#grandpa).\n\n## Inherent Transactions\n\nA special type of unsigned transaction, referred to as _inherents_, that enables a block authoring node to insert information that doesn't require validation directly into a block.\n\nOnly the block-authoring node that calls the inherent transaction function can insert data into its block. In general, validators assume the data inserted using an inherent transaction is valid and reasonable even if it can't be deterministically verified.\n\n## JSON-RPC\n\nA stateless, lightweight remote procedure call protocol encoded in JavaScript Object Notation (JSON). JSON-RPC provides a standard way to call functions on a remote system by using JSON.\n\nFor Polkadot SDK, this protocol is implemented through the [Parity JSON-RPC](https://github.com/paritytech/jsonrpc){target=\\_blank} crate.\n\n## Keystore\n\nA subsystem for managing keys for the purpose of producing new blocks.\n\n## Kusama\n\n[Kusama](https://kusama.network/){target=\\_blank} is a Polkadot SDK-based blockchain that implements a design similar to the [Polkadot](#polkadot) network.\n\nKusama is a [canary](https://en.wiktionary.org/wiki/canary_in_a_coal_mine){target=\\_blank} network and is referred to as [Polkadot's \"wild cousin.\"](https://wiki.polkadot.com/learn/learn-comparisons-kusama/){target=\\_blank}.\n\nAs a canary network, Kusama is expected to be more stable than a test network like [Westend](#westend) but less stable than a production network like [Polkadot](#polkadot). Kusama is controlled by its network participants and is intended to be stable enough to encourage meaningful experimentation.\n\n## libp2p\n\nA peer-to-peer networking stack that allows the use of many transport mechanisms, including WebSockets (usable in a web browser).\n\nPolkadot SDK uses the [Rust implementation](https://github.com/libp2p/rust-libp2p){target=\\_blank} of the `libp2p` networking stack.\n\n## Light Client\n\nA type of blockchain node that doesn't store the [chain state](#state) or produce blocks.\n\nA light client can verify cryptographic primitives and provides a [remote procedure call (RPC)](https://en.wikipedia.org/wiki/Remote_procedure_call){target=\\_blank} server, enabling blockchain users to interact with the network.\n\n## Metadata\n\nData that provides information about one or more aspects of a system.\nThe metadata that exposes information about a Polkadot SDK blockchain enables you to interact with that system.\n\n## Nominated Proof of Stake (NPoS)\n\nA method for determining [validators](#validator) or _[authorities](#authority)_ based on a willingness to commit their stake to the proper functioning of one or more block-producing nodes.\n\n## Oracle\n\nAn entity that connects a blockchain to a non-blockchain data source. Oracles enable the blockchain to access and act upon information from existing data sources and incorporate data from non-blockchain systems and services.\n\n## Origin\n\nA [FRAME](#frame-framework-for-runtime-aggregation-of-modularized-entities) primitive that identifies the source of a [dispatched](#dispatchable) function call into the [runtime](#runtime). The FRAME System pallet defines three built-in [origins](#origin). As a [pallet](#pallet) developer, you can also define custom origins, such as those defined by the [Collective pallet](https://paritytech.github.io/substrate/master/pallet_collective/enum.RawOrigin.html){target=\\_blank}.\n\n## Pallet\n\nA module that can be used to extend the capabilities of a [FRAME](#frame-framework-for-runtime-aggregation-of-modularized-entities)-based [runtime](#runtime).\nPallets bundle domain-specific logic with runtime primitives like [events](#events) and [storage items](#storage-item).\n\n## Parachain\n\nA parachain is a blockchain that derives shared infrastructure and security from a _[relay chain](#relay-chain)_.\nYou can learn more about parachains on the [Polkadot Wiki](https://wiki.polkadot.com/learn/learn-parachains/){target=\\_blank}.\n\n## Paseo\n\nPaseo TestNet provisions testing on Polkadot's \"production\" runtime, which means less chance of feature or code mismatch when developing parachain apps. Specifically, after the [Polkadot Technical fellowship](https://wiki.polkadot.com/learn/learn-polkadot-technical-fellowship/){target=\\_blank} proposes a runtime upgrade for Polkadot, this TestNet is updated, giving a period where the TestNet will be ahead of Polkadot to allow for testing.\n\n## Polkadot\n\nThe [Polkadot network](https://polkadot.com/){target=\\_blank} is a blockchain that serves as the central hub of a heterogeneous blockchain network. It serves the role of the [relay chain](#relay-chain) and provides shared infrastructure and security to support [parachains](#parachain).\n\n## Polkadot Cloud\n\nPolkadot Cloud is a platform for deploying resilient, customizable and scalable Web3 applications through Polkadot's functionality. It encompasses the wider Polkadot network infrastructure and security layer where parachains operate. The platform enables users to launch Ethereum-compatible chains, build specialized blockchains, and flexibly manage computing resources through on-demand or bulk coretime purchases. Initially launched with basic parachain functionality, Polkadot Cloud has evolved to offer enhanced flexibility with features like coretime, elastic scaling, and async backing for improved performance.\n\n## Polkadot Hub\n\nPolkadot Hub is a Layer 1 platform that serves as the primary entry point to the Polkadot ecosystem, providing essential functionality without requiring parachain deployment. It offers core services including smart contracts, identity management, staking, governance, and interoperability with other ecosystems, making it simple and fast for both builders and users to get started in Web3.\n\n## PolkaVM\n\nPolkaVM is a custom virtual machine optimized for performance, leveraging a RISC-V-based architecture to support Solidity and any language that compiles to RISC-V. It is specifically designed for the Polkadot ecosystem, enabling smart contract deployment and execution.\n\n## Relay Chain\n\nRelay chains are blockchains that provide shared infrastructure and security to the [parachains](#parachain) in the network. In addition to providing [consensus](#consensus) capabilities, relay chains allow parachains to communicate and exchange digital assets without needing to trust one another.\n\n## Rococo\n\nA [parachain](#parachain) test network for the Polkadot network. The [Rococo](#rococo) network is a Polkadot SDK-based blockchain with an October 14, 2024 deprecation date. Development teams are encouraged to use the Paseo TestNet instead.\n\n## Runtime\n\nThe runtime represents the [state transition function](#state-transition-function-stf) for a blockchain. In Polkadot SDK, the runtime is stored as a [Wasm](#webassembly-wasm) binary in the chain state. The Runtime is stored under a unique state key and can be modified during the execution of the state transition function.\n\n## Slot\n\nA fixed, equal interval of time used by consensus engines such as [Aura](#authority-round-aura) and [BABE](#blind-assignment-of-blockchain-extension-babe). In each slot, a subset of [authorities](#authority) is permitted, or obliged, to [author](#block-author) a block.\n\n## Sovereign Account\n\nThe unique account identifier for each chain in the relay chain ecosystem. It is often used in cross-consensus (XCM) interactions to sign XCM messages sent to the relay chain or other chains in the ecosystem.\n\nThe sovereign account for each chain is a root-level account that can only be accessed using the Sudo pallet or through governance. The account identifier is calculated by concatenating the Blake2 hash of a specific text string and the registered parachain identifier.\n\n## SS58 Address Format\n\nA public key address based on the Bitcoin [`Base-58-check`](https://en.bitcoin.it/wiki/Base58Check_encoding){target=\\_blank} encoding. Each Polkadot SDK SS58 address uses a `base-58` encoded value to identify a specific account on a specific Polkadot SDK-based chain\n\nThe [canonical `ss58-registry`](https://github.com/paritytech/ss58-registry){target=\\_blank} provides additional details about the address format used by different Polkadot SDK-based chains, including the network prefix and website used for different networks\n\n## State Transition Function (STF)\n\nThe logic of a blockchain that determines how the state changes when a block is processed. In Polkadot SDK, the state transition function is effectively equivalent to the [runtime](#runtime).\n\n## Storage Item\n\n[FRAME](#frame-framework-for-runtime-aggregation-of-modularized-entities) primitives that provide type-safe data persistence capabilities to the [runtime](#runtime).\nLearn more in the [storage items](https://paritytech.github.io/polkadot-sdk/master/frame_support/storage/types/index.html){target=\\_blank} reference document in the Polkadot SDK.\n\n## Substrate\n\nA flexible framework for building modular, efficient, and upgradeable blockchains. Substrate is written in the [Rust](https://www.rust-lang.org/){target=\\_blank} programming language and is maintained by [Parity Technologies](https://www.parity.io/){target=\\_blank}.\n\n## Transaction\n\nAn [extrinsic](#extrinsic) that includes a signature that can be used to verify the account authorizing it inherently or via [signed extensions](https://paritytech.github.io/polkadot-sdk/master/polkadot_sdk_docs/reference_docs/signed_extensions/index.html){target=\\_blank}.\n\n## Transaction Era\n\nA definable period expressed as a range of block numbers during which a transaction can be included in a block.\nTransaction eras are used to protect against transaction replay attacks if an account is reaped and its replay-protecting nonce is reset to zero.\n\n## Trie (Patricia Merkle Tree)\n\nA data structure used to represent sets of key-value pairs and enables the items in the data set to be stored and retrieved using a cryptographic hash. Because incremental changes to the data set result in a new hash, retrieving data is efficient even if the data set is very large. With this data structure, you can also prove whether the data set includes any particular key-value pair without access to the entire data set.\n\nIn Polkadot SDK-based blockchains, state is stored in a trie data structure that supports the efficient creation of incremental digests. This trie is exposed to the [runtime](#runtime) as [a simple key/value map](#storage-item) where both keys and values can be arbitrary byte arrays.\n\n## Validator\n\nA validator is a node that participates in the consensus mechanism of the network. Its roles include block production, transaction validation, network integrity, and security maintenance.\n\n## WebAssembly (Wasm)\n\nAn execution architecture that allows for the efficient, platform-neutral expression of\ndeterministic, machine-executable logic.\n\n[Wasm](https://webassembly.org/){target=\\_blank} can be compiled from many languages, including\nthe [Rust](https://www.rust-lang.org/){target=\\_blank} programming language. Polkadot SDK-based chains use a Wasm binary to provide portable [runtimes](#runtime) that can be included as part of the chain's state.\n\n## Weight\n\nA convention used in Polkadot SDK-based blockchains to measure and manage the time it takes to validate a block.\nPolkadot SDK defines one unit of weight as one picosecond of execution time on reference hardware.\n\nThe maximum block weight should be equivalent to one-third of the target block time with an allocation of one-third each for:\n\n- Block construction\n- Network propagation\n- Import and verification\n\nBy defining weights, you can trade-off the number of transactions per second and the hardware required to maintain the target block time appropriate for your use case. Weights are defined in the runtime, meaning you can tune them using runtime updates to keep up with hardware and software improvements.\n\n## Westend\n\nWestend is a Parity-maintained, Polkadot SDK-based blockchain that serves as a test network for the [Polkadot](#polkadot) network.\n"}
{"title": "JSON-RPC APIs", "slug": "develop-smart-contracts-json-rpc-apis", "raw_md_url": "https://raw.githubusercontent.com/polkadot-developers/polkadot-docs/dawn/improved-llms/.ai/pages/develop-smart-contracts-json-rpc-apis.md", "html_url": "https://docs.polkadot.com/develop/smart-contracts/json-rpc-apis/", "categories": ["Reference"], "description": "JSON-RPC APIs guide for Polkadot Hub, covering supported methods, parameters, and examples for interacting with the chain.", "content": "# JSON-RPC APIs\n\n-!!! smartcontract \"PolkaVM Preview Release\"\n    PolkaVM smart contracts with Ethereum compatibility are in **early-stage development and may be unstable or incomplete**.\n\n## Introduction\n\nPolkadot Hub provides Ethereum compatibility through its JSON-RPC interface, allowing developers to interact with the chain using familiar Ethereum tooling and methods. This document outlines the supported [Ethereum JSON-RPC methods](https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods){target=\\_blank} and provides examples of how to use them.\n\nThis guide uses the Polkadot Hub TestNet endpoint:\n\n```text\nhttps://testnet-passet-hub-eth-rpc.polkadot.io\n```\n\n## Available Methods\n\n### eth_accounts\n\nReturns a list of addresses owned by the client. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_accounts){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_accounts\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_accounts\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_blockNumber\n\nReturns the number of the most recent block. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_blocknumber){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_blockNumber\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_blockNumber\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_call\n\nExecutes a new message call immediately without creating a transaction. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call){target=\\_blank}.\n\n**Parameters**:\n\n- **`transaction` ++\"object\"++**: The transaction call object.\n    - **`to` ++\"string\"++**: Recipient address of the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`data` ++\"string\"++**: Hash of the method signature and encoded parameters. Must be a [data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`from` ++\"string\"++**: (Optional) Sender's address for the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`gas` ++\"string\"++**: (Optional) Gas limit to execute the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`gasPrice` ++\"string\"++**: (Optional) Gas price per unit of gas. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`value` ++\"string\"++**: (Optional) Value in wei to send with the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) Block tag or block number to execute the call at. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n\n**Example**:\n\n```bash title=\"eth_call\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_call\",\n    \"params\":[{\n        \"to\": \"INSERT_RECIPIENT_ADDRESS\",\n        \"data\": \"INSERT_ENCODED_CALL\"\n    }, \"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_RECIPIENT_ADDRESS`, `INSERT_ENCODED_CALL`, and `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_chainId\n\nReturns the chain ID used for signing transactions. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_chainid){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_chainId\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_chainId\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_estimateGas\n\nEstimates gas required for a transaction. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_estimategas){target=\\_blank}.\n\n**Parameters**:\n\n- **`transaction` ++\"object\"++**: The transaction call object.\n    - **`to` ++\"string\"++**: Recipient address of the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`data` ++\"string\"++**: Hash of the method signature and encoded parameters. Must be a [data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`from` ++\"string\"++**: (Optional) Sender's address for the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`gas` ++\"string\"++**: (Optional) Gas limit to execute the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`gasPrice` ++\"string\"++**: (Optional) Gas price per unit of gas. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`value` ++\"string\"++**: (Optional) Value in wei to send with the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) Block tag or block number to execute the call at. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n\n**Example**:\n\n```bash title=\"eth_estimateGas\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_estimateGas\",\n    \"params\":[{\n        \"to\": \"INSERT_RECIPIENT_ADDRESS\",\n        \"data\": \"INSERT_ENCODED_FUNCTION_CALL\"\n    }],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_RECIPIENT_ADDRESS` and `INSERT_ENCODED_CALL` with the proper values.\n\n---\n\n### eth_gasPrice\n\nReturns the current gas price in Wei. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gasprice){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_gasPrice\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_gasPrice\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_getBalance\n\nReturns the balance of a given address. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance){target=\\_blank}.\n\n**Parameters**:\n\n- **`address` ++\"string\"++**: Address to query balance. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n\n**Example**:\n\n```bash title=\"eth_getBalance\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBalance\",\n    \"params\":[\"INSERT_ADDRESS\", \"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_ADDRESS` and `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_getBlockByHash\n\nReturns information about a block by its hash. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbyhash){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockHash` ++\"string\"++**: The hash of the block to retrieve. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`fullTransactions` ++\"boolean\"++**: If `true`, returns full transaction details; if `false`, returns only transaction hashes.\n\n**Example**:\n\n```bash title=\"eth_getBlockByHash\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByHash\",\n    \"params\":[\"INSERT_BLOCK_HASH\", INSERT_BOOLEAN],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_HASH` and `INSERT_BOOLEAN` with the proper values.\n\n---\n\n### eth_getBlockByNumber\n\nReturns information about a block by its number. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockValue` ++\"string\"++**: (Optional) The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n- **`fullTransactions` ++\"boolean\"++**: If `true`, returns full transaction details; if `false`, returns only transaction hashes.\n\n**Example**:\n\n```bash title=\"eth_getBlockByNumber\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockByNumber\",\n    \"params\":[\"INSERT_BLOCK_VALUE\", INSERT_BOOLEAN],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_VALUE` and `INSERT_BOOLEAN` with the proper values.\n\n---\n\n### eth_getBlockTransactionCountByNumber\n\nReturns the number of transactions in a block from a block number. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbynumber){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockValue` ++\"string\"++**: The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n\n**Example**:\n\n```bash title=\"eth_getBlockTransactionCountByNumber\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockTransactionCountByNumber\",\n    \"params\":[\"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_getBlockTransactionCountByHash\n\nReturns the number of transactions in a block from a block hash. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblocktransactioncountbyhash){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockHash` ++\"string\"++**: The hash of the block to retrieve. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getBlockTransactionCountByHash\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getBlockTransactionCountByHash\",\n    \"params\":[\"INSERT_BLOCK_HASH\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_HASH` with the proper values.\n\n---\n\n### eth_getCode\n\nReturns the code at a given address. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getcode){target=\\_blank}.\n\n**Parameters**:\n\n- **`address` ++\"string\"++**: Contract or account address to query code. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n\n**Example**:\n\n```bash title=\"eth_getCode\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getCode\",\n    \"params\":[\"INSERT_ADDRESS\", \"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_ADDRESS` and `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_getLogs\n\nReturns an array of all logs matching a given filter object. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs){target=\\_blank}.\n\n**Parameters**:\n\n- **`filter` ++\"object\"++**: The filter object.\n    - **`fromBlock` ++\"string\"++**: (Optional) Block number or tag to start from. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n    - **`toBlock` ++\"string\"++**: (Optional) Block number or tag to end at. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n    - **`address` ++\"string\" or \"array of strings\"++**: (Optional) Contract address or a list of addresses from which to get logs. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`topics` ++\"array of strings\"++**: (Optional) Array of topics for filtering logs. Each topic can be a single [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string or an array of such strings (meaning OR).\n    - **`blockhash` ++\"string\"++**: (Optional) Hash of a specific block. Cannot be used with `fromBlock` or `toBlock`. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getLogs\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getLogs\",\n    \"params\":[{\n        \"fromBlock\": \"latest\",\n        \"toBlock\": \"latest\"\n    }],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_getStorageAt\n\nReturns the value from a storage position at a given address. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getstorageat){target=\\_blank}.\n\n**Parameters**:\n\n- **`address` ++\"string\"++**: Contract or account address to query code. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`storageKey` ++\"string\"++**: Position in storage to retrieve data from. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n\n**Example**:\n\n```bash title=\"eth_getStorageAt\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getStorageAt\",\n    \"params\":[\"INSERT_ADDRESS\", \"INSERT_STORAGE_KEY\", \"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_ADDRESS`, `INSERT_STORAGE_KEY`, and `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_getTransactionCount\n\nReturns the number of transactions sent from an address (nonce). [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount){target=\\_blank}.\n\n**Parameters**:\n\n- **`address` ++\"string\"++**: Address to query balance. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block).\n\n**Example**:\n\n```bash title=\"eth_getTransactionCount\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionCount\",\n    \"params\":[\"INSERT_ADDRESS\", \"INSERT_BLOCK_VALUE\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_ADDRESS` and `INSERT_BLOCK_VALUE` with the proper values.\n\n---\n\n### eth_getTransactionByHash\n\nReturns information about a transaction by its hash. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyhash){target=\\_blank}.\n\n**Parameters**:\n\n- **`transactionHash` ++\"string\"++**: The hash of the transaction. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getTransactionByHash\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByHash\",\n    \"params\":[\"INSERT_TRANSACTION_HASH\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_TRANSACTION_HASH` with the proper values.\n\n---\n\n### eth_getTransactionByBlockNumberAndIndex\n\nReturns information about a transaction by block number and transaction index. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyblocknumberandindex){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockValue` ++\"string\"++**: The block value to be fetched. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n- **`transactionIndex` ++\"string\"++**: The index of the transaction in the block. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getTransactionByBlockNumberAndIndex\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\":[\"INSERT_BLOCK_VALUE\", \"INSERT_TRANSACTION_INDEX\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_VALUE` and `INSERT_TRANSACTION_INDEX` with the proper values.\n\n---\n\n### eth_getTransactionByBlockHashAndIndex\n\nReturns information about a transaction by block hash and transaction index. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionbyblockhashandindex){target=\\_blank}.\n\n**Parameters**:\n\n- **`blockHash` ++\"string\"++**: The hash of the block. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`transactionIndex` ++\"string\"++**: The index of the transaction in the block. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getTransactionByBlockHashAndIndex\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionByBlockHashAndIndex\",\n    \"params\":[\"INSERT_BLOCK_HASH\", \"INSERT_TRANSACTION_INDEX\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_BLOCK_HASH` and `INSERT_TRANSACTION_INDEX` with the proper values.\n\n---\n\n### eth_getTransactionReceipt\n\nReturns the receipt of a transaction by transaction hash. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt){target=\\_blank}.\n\n**Parameters**:\n\n- **`transactionHash` ++\"string\"++**: The hash of the transaction. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_getTransactionReceipt\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_getTransactionReceipt\",\n    \"params\":[\"INSERT_TRANSACTION_HASH\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_TRANSACTION_HASH` with the proper values.\n\n---\n\n### eth_maxPriorityFeePerGas\n\nReturns an estimate of the current priority fee per gas, in Wei, to be included in a block.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_maxPriorityFeePerGas\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_maxPriorityFeePerGas\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### eth_sendRawTransaction\n\nSubmits a raw transaction. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction){target=\\_blank}.\n\n**Parameters**:\n\n- **`callData` ++\"string\"++**: Signed transaction data. Must be a [data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_sendRawTransaction\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_sendRawTransaction\",\n    \"params\":[\"INSERT_CALL_DATA\"],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_CALL_DATA` with the proper values.\n\n---\n\n### eth_sendTransaction\n\nCreates and sends a new transaction. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction){target=\\_blank}.\n\n**Parameters**:\n\n- **`transaction` ++\"object\"++**: The transaction object.\n    - **`from` ++\"string\"++**: Address sending the transaction. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`to` ++\"string\"++**: (Optional) Recipient address. No need to provide this value when deploying a contract. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`gas` ++\"string\"++**: (optional, default: `90000`) gas limit for execution. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`gasPrice` ++\"string\"++**: (Optional) Gas price per unit. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`value` ++\"string\"++**: (Optional) Amount of Ether to send. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`data` ++\"string\"++**: (Optional) Contract bytecode or encoded method call. Must be a [data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`nonce` ++\"string\"++**: (Optional) Transaction nonce. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n\n**Example**:\n\n```bash title=\"eth_sendTransaction\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_sendTransaction\",\n    \"params\":[{\n        \"from\": \"INSERT_SENDER_ADDRESS\",\n        \"to\": \"INSERT_RECIPIENT_ADDRESS\",\n        \"gas\": \"INSERT_GAS_LIMIT\",\n        \"gasPrice\": \"INSERT_GAS_PRICE\",\n        \"value\": \"INSERT_VALUE\",\n        \"input\": \"INSERT_INPUT_DATA\",\n        \"nonce\": \"INSERT_NONCE\"\n    }],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_SENDER_ADDRESS`, `INSERT_RECIPIENT_ADDRESS`, `INSERT_GAS_LIMIT`, `INSERT_GAS_PRICE`, `INSERT_VALUE`, `INSERT_INPUT_DATA`, and `INSERT_NONCE` with the proper values.\n\n---\n\n### eth_syncing\n\nReturns an object with syncing data or `false` if not syncing. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_syncing){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"eth_syncing\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"eth_syncing\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### net_listening\n\nReturns `true` if the client is currently listening for network connections, otherwise `false`. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#net_listening){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"net_listening\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"net_listening\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### net_peerCount\n\nReturns the number of peers currently connected to the client.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"net_peerCount\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"net_peerCount\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### net_version\n\nReturns the current network ID as a string. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#net_version){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"net_version\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"net_version\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### system_health\n\nReturns information about the health of the system.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"system_health\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"system_health\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### web3_clientVersion\n\nReturns the current client version. [Reference](https://ethereum.org/en/developers/docs/apis/json-rpc/#web3_clientversion){target=\\_blank}.\n\n**Parameters**:\n\nNone.\n\n**Example**:\n\n```bash title=\"web3_clientVersion\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"web3_clientVersion\",\n    \"params\":[],\n    \"id\":1\n}'\n```\n\n---\n\n### debug_traceBlockByNumber \n\nTraces a block's execution by its number and returns a detailed execution trace for each transaction.\n\n**Parameters**:\n\n- **`blockValue` ++\"string\"++**: The block number or tag to trace. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n- **`options` ++\"object\"++**: (Optional) An object containing tracer options.\n    - **`tracer` ++\"string\"++**: The name of the tracer to use (e.g., `\"callTracer\"`, `\"opTracer\"`).\n    - Other tracer-specific options may be supported.\n\n**Example**:\n\n```bash title=\"debug_traceBlockByNumber\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceBlockByNumber\",\n    \"params\":[\"INSERT_BLOCK_VALUE\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}'\n```\n\nEnsure to replace `INSERT_BLOCK_VALUE` with a proper block number if needed.\n\n---\n\n### debug_traceTransaction\n\nTraces the execution of a single transaction by its hash and returns a detailed execution trace.\n\n**Parameters**:\n\n- **`transactionHash` ++\"string\"++**: The hash of the transaction to trace. Must be a [32 byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n- **`options` ++\"object\"++**: (Optional) An object containing tracer options (e.g., `tracer: \"callTracer\"`).\n\n**Example**:\n\n```bash title=\"debug_traceTransaction\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceTransaction\",\n    \"params\":[\"INSERT_TRANSACTION_HASH\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_TRANSACTION_HASH` with the proper value.\n\n---\n\n### debug_traceCall\n\nExecutes a new message call and returns a detailed execution trace without creating a transaction on the blockchain.\n\n**Parameters**:\n\n- **`transaction` ++\"object\"++**: The transaction call object, similar to `eth_call` parameters.\n    - **`to` ++\"string\"++**: Recipient address of the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`data` ++\"string\"++**: Hash of the method signature and encoded parameters. Must be a [data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`from` ++\"string\"++**: (Optional) Sender's address for the call. Must be a [20-byte data](https://ethereum.org/en/developers/docs/apis/json-rpc/#unformatted-data-encoding){target=\\_blank} string.\n    - **`gas` ++\"string\"++**: (Optional) Gas limit to execute the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`gasPrice` ++\"string\"++**: (Optional) Gas price per unit of gas. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n    - **`value` ++\"string\"++**: (Optional) Value in wei to send with the call. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string.\n- **`blockValue` ++\"string\"++**: (Optional) Block tag or block number to execute the call at. Must be a [quantity](https://ethereum.org/en/developers/docs/apis/json-rpc/#quantities-encoding){target=\\_blank} string or a [default block parameter](https://ethereum.org/en/developers/docs/apis/json-rpc/#default-block){target=\\_blank}.\n- **`options` ++\"object\"++**: (Optional) An object containing tracer options (e.g., `tracer: \"callTracer\"`).\n\n**Example**:\n\n```bash title=\"debug_traceCall\"\ncurl -X POST https://testnet-passet-hub-eth-rpc.polkadot.io \\\n-H \"Content-Type: application/json\" \\\n--data '{\n    \"jsonrpc\":\"2.0\",\n    \"method\":\"debug_traceCall\",\n    \"params\":[{\n        \"from\": \"INSERT_SENDER_ADDRESS\",\n        \"to\": \"INSERT_RECIPIENT_ADDRESS\",\n        \"data\": \"INSERT_ENCODED_CALL\"\n    }, \"INSERT_BLOCK_VALUE\", {\"tracer\": \"callTracer\"}],\n    \"id\":1\n}'\n```\n\nEnsure to replace the `INSERT_SENDER_ADDRESS`, `INSERT_RECIPIENT_ADDRESS`, `INSERT_ENCODED_CALL`, and `INSERT_BLOCK_VALUE` with the proper value.\n\n---\n\n## Response Format\n\nAll responses follow the standard JSON-RPC 2.0 format:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": ... // The return value varies by method\n}\n```\n\n## Error Handling\n\nIf an error occurs, the response will include an error object:\n\n```json\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"error\": {\n        \"code\": -32000,\n        \"message\": \"Error message here\"\n    }\n}\n```\n"}
{"title": "XCM Config", "slug": "develop-interoperability-xcm-config", "raw_md_url": "https://raw.githubusercontent.com/polkadot-developers/polkadot-docs/dawn/improved-llms/.ai/pages/develop-interoperability-xcm-config.md", "html_url": "https://docs.polkadot.com/develop/interoperability/xcm-config/", "categories": ["Reference", "Polkadot Protocol"], "description": "Learn how the XCM Executor configuration works for your custom Polkadot SDK-based runtime with detailed guidance and references.", "content": "# XCM Config\n\n## Introduction\n\nThe [XCM executor](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/index.html){target=\\_blank} is a crucial component responsible for interpreting and executing XCM messages (XCMs) with Polkadot SDK-based chains. It processes and manages XCM instructions, ensuring they are executed correctly and in sequentially. Adhering to the [Cross-Consensus Virtual Machine (XCVM) specification](https://paritytech.github.io/xcm-docs/overview/xcvm.html#the-xcvm){target=\\_blank}, the XCM executor can be customized or replaced with an alternative that also complies with the [XCVM standards](https://github.com/polkadot-fellows/xcm-format?tab=readme-ov-file#12-the-xcvm){target=\\_blank}.\n\nThe `XcmExecutor` is not a pallet but a struct parameterized by a `Config` trait. The `Config` trait is the inner configuration, parameterizing the outer `XcmExecutor<Config>` struct. Both configurations are set up within the runtime.\n\nThe executor is highly configurable, with the [XCM builder](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/index.html){target=\\_blank} offering building blocks to tailor the configuration to specific needs. While they serve as a foundation, users can easily create custom blocks to suit unique configurations. Users can also create their building blocks to address unique needs. This article examines the XCM configuration process, explains each configurable item, and provides examples of the tools and types available to help customize these settings.\n\n## XCM Executor Configuration\n\nThe `Config` trait defines the XCM executor’s configuration, which requires several associated types. Each type has specific trait bounds that the concrete implementation must fulfill. Some types, such as `RuntimeCall`, come with a default implementation in most cases, while others use the unit type `()` as the default. For many of these types, selecting the appropriate implementation carefully is crucial. Predefined solutions and building blocks can be adapted to your specific needs. These solutions can be found in the [`xcm-builder`](https://github.com/paritytech/polkadot-sdk/tree/polkadot-stable2506/polkadot/xcm/xcm-builder){target=\\_blank} folder.\n\nEach type is explained below, along with an overview of some of its implementations:\n\n```rust\n-pub trait Config {\n    type RuntimeCall: Parameter + Dispatchable<PostInfo = PostDispatchInfo> + GetDispatchInfo;\n    type XcmSender: SendXcm;\n    type AssetTransactor: TransactAsset;\n    type OriginConverter: ConvertOrigin<<Self::RuntimeCall as Dispatchable>::RuntimeOrigin>;\n    type IsReserve: ContainsPair<MultiAsset, MultiLocation>;\n    type IsTeleporter: ContainsPair<MultiAsset, MultiLocation>;\n    type Aliasers: ContainsPair<Location, Location>;\n    type UniversalLocation: Get<InteriorMultiLocation>;\n    type Barrier: ShouldExecute;\n    type Weigher: WeightBounds<Self::RuntimeCall>;\n    type Trader: WeightTrader;\n    type ResponseHandler: OnResponse;\n    type AssetTrap: DropAssets;\n    type AssetClaims: ClaimAssets;\n    type AssetLocker: AssetLock;\n    type AssetExchanger: AssetExchange;\n    type SubscriptionService: VersionChangeNotifier;\n    type PalletInstancesInfo: PalletsInfoAccess;\n    type MaxAssetsIntoHolding: Get<u32>;\n    type FeeManager: FeeManager;\n    type MessageExporter: ExportXcm;\n    type UniversalAliases: Contains<(MultiLocation, Junction)>;\n    type CallDispatcher: CallDispatcher<Self::RuntimeCall>;\n    type SafeCallFilter: Contains<Self::RuntimeCall>;\n    type TransactionalProcessor: ProcessTransaction;\n    type HrmpNewChannelOpenRequestHandler: HandleHrmpNewChannelOpenRequest;\n    type HrmpChannelAcceptedHandler: HandleHrmpChannelAccepted;\n    type HrmpChannelClosingHandler: HandleHrmpChannelClosing;\n    type XcmRecorder: RecordXcm;\n}\n```\n\n## Config Items\n\nEach configuration item is explained below, detailing the associated type’s purpose and role in the XCM executor. Many of these types have predefined solutions available in the `xcm-builder`. Therefore, the available configuration items are:\n\n- **[`RuntimeCall`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.RuntimeCall){target=\\_blank}**: Defines the runtime's callable functions, created via the [`frame::runtime`](https://paritytech.github.io/polkadot-sdk/master/frame_support/attr.runtime.html){target=\\_blank} macro. It represents an enum listing the callable functions of all implemented pallets.\n\n    ```rust\n    type RuntimeCall: Parameter + Dispatchable<PostInfo = PostDispatchInfo> + GetDispatchInfo\n    ```\n   The associated traits signify:\n\n    - **`Parameter`**: Ensures the type is encodable, decodable, and usable as a parameter.\n    - **`Dispatchable`**: Indicates it can be executed in the runtime.\n    - **`GetDispatchInfo`**: Provides weight details, determining how long execution takes.\n\n- **[`XcmSender`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.XcmSender){target=\\_blank}**: Implements the [`SendXcm`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm/v4/trait.SendXcm.html){target=\\_blank} trait, specifying how the executor sends XCMs using transport layers (e.g., UMP for relay chains or XCMP for sibling chains). If a runtime lacks certain transport layers, such as [HRMP](https://wiki.polkadot.com/learn/learn-xcm-transport/#hrmp-xcmp-lite){target=\\_blank} (or [XCMP](https://wiki.polkadot.com/learn/learn-xcm-transport/#xcmp-cross-consensus-message-passing-design-summary){target=\\_blank}).\n\n    ```rust\n    type XcmSender: SendXcm;\n    ```\n\n- **[`AssetTransactor`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.AssetTransactor){target=\\_blank}**: Implements the [`TransactAsset`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.TransactAsset.html){target=\\_blank} trait, handling the conversion and transfer of MultiAssets between accounts or registers. It can be configured to support native tokens, fungibles, and non-fungibles or multiple tokens using pre-defined adapters like [`FungibleAdapter`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.FungibleAdapter.html){target=\\_blank} or custom solutions.\n\n    ```rust\n    type AssetTransactor: TransactAsset;\n    ```\n\n- **[`OriginConverter`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.OriginConverter){target=\\_blank}**: Implements the [`ConvertOrigin`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.ConvertOrigin.html){target=\\_blank} trait to map `MultiLocation` origins to `RuntimeOrigin`. Multiple implementations can be combined, and [`OriginKind`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/test_utils/enum.OriginKind.html){target=\\_blank} is used to resolve conflicts. Pre-defined converters like [`SovereignSignedViaLocation`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.SovereignSignedViaLocation.html){target=\\_blank} and [`SignedAccountId32AsNative`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.SignedAccountId32AsNative.html){target=\\_blank} handle sovereign and local accounts respectively.\n\n    ```rust\n    type OriginConverter: ConvertOrigin<<Self::RuntimeCall as Dispatchable>::RuntimeOrigin>;\n    ```\n\n- **[`IsReserve`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.IsReserve){target=\\_blank}**: Specifies trusted `<MultiAsset, MultiLocation>` pairs for depositing reserve assets. Using the unit type `()` blocks reserve deposits. The [`NativeAsset`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.NativeAsset.html){target=\\_blank} struct is an example of a reserve implementation.\n\n    ```rust\n    type IsReserve: ContainsPair<MultiAsset, MultiLocation>;\n    ```\n\n- **[`IsTeleporter`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.IsTeleporter){target=\\_blank}**: Defines trusted `<MultiAsset, MultiLocation>` pairs for teleporting assets to the chain. Using `()` blocks the [`ReceiveTeleportedAssets`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/test_utils/enum.Instruction.html#variant.ReceiveTeleportedAsset){target=\\_blank} instruction. The [`NativeAsset`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.NativeAsset.html){target=\\_blank} struct can act as an implementation.\n\n    ```rust\n    type IsTeleporter: ContainsPair<MultiAsset, MultiLocation>;\n    ```\n\n- **[`Aliasers`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.Aliasers){target=\\_blank}**: A list of `(Origin, Target)` pairs enabling each `Origin` to be replaced with its corresponding `Target`.\n\n    ```rust\n    type Aliasers: ContainsPair<Location, Location>;\n    ```\n\n- **[`UniversalLocation`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.UniversalLocation){target=\\_blank}**: Specifies the runtime's location in the consensus universe.\n\n    ```rust\n    type UniversalLocation: Get<InteriorMultiLocation>;\n    ```\n\n    - Some examples are:\n        - `X1(GlobalConsensus(NetworkId::Polkadot))` for Polkadot\n        - `X1(GlobalConsensus(NetworkId::Kusama))` for Kusama\n        - `X2(GlobalConsensus(NetworkId::Polkadot), Parachain(1000))` for Statemint\n\n- **[`Barrier`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.Barrier){target=\\_blank}**: Implements the [`ShouldExecute`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.ShouldExecute.html){target=\\_blank} trait, functioning as a firewall for XCM execution. Multiple barriers can be combined in a tuple, where execution halts if one succeeds.\n\n    ```rust\n    type Barrier: ShouldExecute;\n    ```\n\n- **[`Weigher`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.Weigher){target=\\_blank}**: Calculates the weight of XCMs and instructions, enforcing limits and refunding unused weight. Common solutions include [`FixedWeightBounds`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.FixedWeightBounds.html){target=\\_blank}, which uses a base weight and limits on instructions.\n\n    ```rust\n    type Weigher: WeightBounds<Self::RuntimeCall>;\n    ```\n\n- **[`Trader`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.Trader){target=\\_blank}**: Manages asset-based weight purchases and refunds for `BuyExecution` instructions. The [`UsingComponents`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_builder/struct.UsingComponents.html){target=\\_blank} trader is a common implementation.\n\n    ```rust\n    type Trader: WeightTrader;\n    ```\n\n- **[`ResponseHandler`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.ResponseHandler){target=\\_blank}**: Handles `QueryResponse` instructions, implementing the [`OnResponse`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.OnResponse.html){target=\\_blank} trait. FRAME systems typically use the pallet-xcm implementation.\n\n    ```rust\n    type ResponseHandler: OnResponse;\n    ```\n\n- **[`AssetTrap`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.AssetTrap){target=\\_blank}**: Handles leftover assets in the holding register after XCM execution, allowing them to be claimed via `ClaimAsset`. If unsupported, assets are burned.\n\n    ```rust\n    type AssetTrap: DropAssets;\n    ```\n\n- **[`AssetClaims`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.AssetClaims){target=\\_blank}**: Facilitates the claiming of trapped assets during the execution of the `ClaimAsset` instruction. Commonly implemented via pallet-xcm.\n\n    ```rust\n    type AssetClaims: ClaimAssets;\n    ```\n\n- **[`AssetLocker`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.AssetLocker){target=\\_blank}**: Handles the locking and unlocking of assets. Can be omitted using `()` if asset locking is unnecessary.\n\n    ```rust\n    type AssetLocker: AssetLock;\n    ```\n\n- **[`AssetExchanger`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.AssetExchanger){target=\\_blank}**: Implements the [`AssetExchange`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.AssetExchange.html){target=\\_blank} trait to manage asset exchanges during the `ExchangeAsset` instruction. The unit type `()` disables this functionality.\n\n    ```rust\n    type AssetExchanger: AssetExchange;\n    ```\n\n- **[`SubscriptionService`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.SubscriptionService){target=\\_blank}**: Manages `(Un)SubscribeVersion` instructions and returns the XCM version via `QueryResponse`. Typically implemented by pallet-xcm.\n\n    ```rust\n    type SubscriptionService: VersionChangeNotifier;\n    ```\n\n- **[`PalletInstancesInfo`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.PalletInstancesInfo){target=\\_blank}**: Provides runtime pallet information for `QueryPallet` and `ExpectPallet` instructions. FRAME-specific systems often use this, or it can be disabled with `()`.\n\n    ```rust\n    type PalletInstancesInfo: PalletsInfoAccess;\n    ```\n\n \n- [**`MaxAssetsIntoHolding`**](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.MaxAssetsIntoHolding){target=\\_blank}: Limits the number of assets in the [Holding register](https://wiki.polkadot.com/learn/learn-xcm/#holding-register){target=\\_blank}. At most, twice this limit can be held under worst-case conditions.\n    ```rust\n    type MaxAssetsIntoHolding: Get<u32>;\n    ```\n\n- **[`FeeManager`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.FeeManager){target=\\_blank}**: Manages fees for XCM instructions, determining whether fees should be paid, waived, or handled in specific ways. Fees can be waived entirely using `()`.\n\n    ```rust\n    type FeeManager: FeeManager;\n    ```\n\n- **[`MessageExporter`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.MessageExporter){target=\\_blank}**: Implements the [`ExportXcm`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.ExportXcm.html){target=\\_blank} trait, enabling XCMs export to other consensus systems. It can spoof origins for use in bridges. Use `()` to disable exporting.\n\n    ```rust\n    type MessageExporter: ExportXcm;\n    ```\n\n- **[`UniversalAliases`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.UniversalAliases){target=\\_blank}**: Lists origin locations and universal junctions allowed to elevate themselves in the `UniversalOrigin` instruction. Using `Nothing` prevents origin aliasing.\n\n    ```rust\n    type UniversalAliases: Contains<(MultiLocation, Junction)>;\n    ```\n\n- **[`CallDispatcher`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.CallDispatcher){target=\\_blank}**: Dispatches calls from the `Transact` instruction, adapting the origin or modifying the call as needed. Can default to `RuntimeCall`.\n\n    ```rust\n    type CallDispatcher: CallDispatcher<Self::RuntimeCall>;\n    ```\n\n- **[`SafeCallFilter`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.SafeCallFilter){target=\\_blank}**: Whitelists calls permitted in the `Transact` instruction. Using `Everything` allows all calls, though this is temporary until proof size weights are accounted for.\n\n    ```rust\n    type SafeCallFilter: Contains<Self::RuntimeCall>;\n    ```\n\n- **[`TransactionalProcessor`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.TransactionalProcessor){target=\\_blank}**: Implements the [`ProccessTransaction`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/traits/trait.ProcessTransaction.html){target=\\_blank} trait. It ensures that XCM instructions are executed atomically, meaning they either fully succeed or fully fail without any partial effects. This type allows for non-transactional XCM instruction processing by setting the `()` type.\n\n    ```rust\n    type TransactionalProcessor: ProcessTransaction;\n    ```\n\n- **[`HrmpNewChannelOpenRequestHandler`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.HrmpNewChannelOpenRequestHandler){target=\\_blank}**: Enables optional logic execution in response to the `HrmpNewChannelOpenRequest` XCM notification.\n\n    ```rust\n    type HrmpNewChannelOpenRequestHandler: HandleHrmpNewChannelOpenRequest;\n    ```\n\n- **[`HrmpChannelAcceptedHandler`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.HrmpChannelAcceptedHandler){target=\\_blank}**: Enables optional logic execution in response to the `HrmpChannelAccepted` XCM notification.\n\n    ```rust\n    type HrmpChannelAcceptedHandler: HandleHrmpChannelAccepted;\n    ```\n\n- **[`HrmpChannelClosingHandler`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.HrmpChannelClosingHandler){target=\\_blank}**: Enables optional logic execution in response to the `HrmpChannelClosing` XCM notification.\n\n    ```rust\n    type HrmpChannelClosingHandler: HandleHrmpChannelClosing;\n    ```\n\n- **[`XcmRecorder`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/trait.Config.html#associatedtype.XcmRecorder){target=\\_blank}**: Allows tracking of the most recently executed XCM, primarily for use with dry-run runtime APIs.\n\n    ```rust\n    type XcmRecorder: RecordXcm;\n    ```\n\n### Inner Config\n\nThe `Config` trait underpins the `XcmExecutor`, defining its core behavior through associated types for asset handling, XCM processing, and permission management. These types are categorized as follows:\n\n- **Handlers**: Manage XCMs sending, asset transactions, and special notifications.\n- **Filters**: Define trusted combinations, origin substitutions, and execution barriers.\n- **Converters**: Handle origin conversion for call execution.\n- **Accessors**: Provide weight determination and pallet information.\n- **Constants**: Specify universal locations and asset limits.\n- **Common Configs**: Include shared settings like `RuntimeCall`.\n\nThe following diagram outlines this categorization:\n\n```mermaid\nflowchart LR\n    A[Inner Config] --> B[Handlers]\n    A --> C[Filters]\n    A --> D[Converters]\n    A --> E[Accessors]\n    A --> F[Constants]\n    A --> G[Common Configs]\n\n    B --> H[XcmSender]\n    B --> I[AssetTransactor]\n    B --> J[Trader]\n    B --> K[ResponseHandler]\n    B --> L[AssetTrap]\n    B --> M[AssetLocker]\n    B --> N[AssetExchanger]\n    B --> O[AssetClaims]\n    B --> P[SubscriptionService]\n    B --> Q[FeeManager]\n    B --> R[MessageExporter]\n    B --> S[CallDispatcher]\n    B --> T[HrmpNewChannelOpenRequestHandler]\n    B --> U[HrmpChannelAcceptedHandler]\n    B --> V[HrmpChannelClosingHandler]\n\n    C --> W[IsReserve]\n    C --> X[IsTeleporter]\n    C --> Y[Aliasers]\n    C --> Z[Barrier]\n    C --> AA[UniversalAliases]\n    C --> AB[SafeCallFilter]\n\n    D --> AC[OriginConverter]\n\n    E --> AD[Weigher]\n    E --> AE[PalletInstancesInfo]\n\n    F --> AF[UniversalLocation]\n    F --> AG[MaxAssetsIntoHolding]\n\n    G --> AH[RuntimeCall]\n```\n\n### Outer Config\n\nThe `XcmExecutor<Config>` struct extends the functionality of the inner config by introducing fields for execution context, asset handling, error tracking, and operational management. For further details, see the documentation for [`XcmExecutor<Config>`](https://paritytech.github.io/polkadot-sdk/master/staging_xcm_executor/struct.XcmExecutor.html#impl-XcmExecutor%3CConfig%3E){target=\\_blank}.\n\n## Multiple Implementations\n\nSome associated types in the `Config` trait are highly configurable and may have multiple implementations (e.g., Barrier). These implementations are organized into a tuple `(impl_1, impl_2, ..., impl_n)`, and the execution follows a sequential order. Each item in the tuple is evaluated individually, each being checked to see if it fails. If an item passes (e.g., returns `Ok` or `true`), the execution stops, and the remaining items are not evaluated. The following example of the `Barrier` type demonstrates how this grouping operates (understanding each item in the tuple is unnecessary for this explanation).\n\nIn the following example, the system will first check the `TakeWeightCredit` type when evaluating the barrier. If it fails, it will check `AllowTopLevelPaidExecutionFrom`, and so on, until one of them returns a positive result. If all checks fail, a Barrier error will be triggered.\n\n```rust\n-pub type Barrier = (\n    TakeWeightCredit,\n    AllowTopLevelPaidExecutionFrom<Everything>,\n    AllowKnownQueryResponses<XcmPallet>,\n    AllowSubscriptionsFrom<Everything>,\n);\n\npub struct XcmConfig;\nimpl xcm_executor::Config for XcmConfig {\n    ...\n    type Barrier = Barrier;\n    ...\n}\n```\n"}
{"title": "XCM Runtime APIs", "slug": "develop-interoperability-xcm-runtime-apis", "raw_md_url": "https://raw.githubusercontent.com/polkadot-developers/polkadot-docs/dawn/improved-llms/.ai/pages/develop-interoperability-xcm-runtime-apis.md", "html_url": "https://docs.polkadot.com/develop/interoperability/xcm-runtime-apis/", "categories": ["Reference", "Polkadot Protocol"], "description": "Learn about XCM Runtime APIs in Polkadot for cross-chain communication. Explore the APIs to simulate and test XCM messages before execution on the network.", "content": "# XCM Runtime APIs\n\n## Introduction\n\nRuntime APIs allow node-side code to extract information from the runtime state. While simple storage access retrieves stored values directly, runtime APIs enable arbitrary computation, making them a powerful tool for interacting with the chain's state.\n\nUnlike direct storage access, runtime APIs can derive values from storage based on arguments or perform computations that don't require storage access. For example, a runtime API might expose a formula for fee calculation, using only the provided arguments as inputs rather than fetching data from storage.\n\nIn general, runtime APIs are used for:\n\n- Accessing a storage item.\n- Retrieving a bundle of related storage items.\n- Deriving a value from storage based on arguments.\n- Exposing formulas for complex computational calculations.\n\nThis section will teach you about specific runtime APIs that support XCM processing and manipulation.\n\n## Dry Run API\n\nThe [Dry-run API](https://paritytech.github.io/polkadot-sdk/master/xcm_runtime_apis/dry_run/trait.DryRunApi.html){target=\\_blank}, given an extrinsic, or an XCM program, returns its effects:\n\n- Execution result\n- Local XCM (in the case of an extrinsic)\n- Forwarded XCMs\n- List of events\n\nThis API can be used independently for dry-running, double-checking, or testing. However, it mainly shines when used with the [Xcm Payment API](#xcm-payment-api), given that it only estimates fees if you know the specific XCM you want to execute or send.\n\n### Dry Run Call\n\nThis API allows a dry-run of any extrinsic and obtaining the outcome if it fails or succeeds, as well as the local xcm and remote xcm messages sent to other chains.\n\n```rust\n-fn dry_run_call(origin: OriginCaller, call: Call, result_xcms_version: XcmVersion) -> Result<CallDryRunEffects<Event>, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `origin` ++\"OriginCaller\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    The origin used for executing the transaction.\n\n    ---\n\n    `call` ++\"Call\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    The extrinsic to be executed.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<CallDryRunEffects<Event>, Error>\"++\n\n    Effects of dry-running an extrinsic. If an error occurs, it is returned instead of the effects.\n\n    ??? child \"Type `CallDryRunEffects<Event>`\"\n\n        `execution_result` ++\"DispatchResultWithPostInfo\"++\n\n        The result of executing the extrinsic.\n\n        ---\n\n        `emitted_events` ++\"Vec<Event>\"++\n\n        The list of events fired by the extrinsic.\n\n        ---\n\n        `local_xcm` ++\"Option<VersionedXcm<()>>\"++\n\n        The local XCM that was attempted to be executed, if any.\n\n        ---\n\n        `forwarded_xcms` ++\"Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>\"++\n\n        The list of XCMs that were queued for sending.\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n\n??? interface \"Example\"\n\n    This example demonstrates how to simulate a cross-chain asset transfer from the Paseo network to the Pop Network using a [reserve transfer](https://wiki.polkadot.com/learn/learn-xcm-usecases/#reserve-asset-transfer){target=\\_blank} mechanism. Instead of executing the actual transfer, the code shows how to test and verify the transaction's behavior through a dry run before performing it on the live network.\n\n    Replace `INSERT_USER_ADDRESS` with your SS58 address before running the script.\n\n    ***Usage with PAPI***\n\n    ```js\n    -import { paseo } from '@polkadot-api/descriptors';\nimport { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\nimport {\n  PolkadotRuntimeOriginCaller,\n  XcmVersionedLocation,\n  XcmVersionedAssets,\n  XcmV3Junction,\n  XcmV3Junctions,\n  XcmV3WeightLimit,\n  XcmV3MultiassetFungibility,\n  XcmV3MultiassetAssetId,\n} from '@polkadot-api/descriptors';\nimport { DispatchRawOrigin } from '@polkadot-api/descriptors';\nimport { Binary } from 'polkadot-api';\nimport { ss58Decode } from '@polkadot-labs/hdkd-helpers';\n\n// Connect to the Paseo relay chain\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://paseo-rpc.dwellir.com')),\n);\n\nconst paseoApi = client.getTypedApi(paseo);\n\nconst popParaID = 4001;\nconst userAddress = 'INSERT_USER_ADDRESS';\nconst userPublicKey = ss58Decode(userAddress)[0];\nconst idBeneficiary = Binary.fromBytes(userPublicKey);\n\n// Define the origin caller\n// This is a regular signed account owned by a user\nlet origin = PolkadotRuntimeOriginCaller.system(\n  DispatchRawOrigin.Signed(userAddress),\n);\n\n// Define a transaction to transfer assets from Polkadot to Pop Network using a Reserve Transfer\nconst tx = paseoApi.tx.XcmPallet.limited_reserve_transfer_assets({\n  dest: XcmVersionedLocation.V3({\n    parents: 0,\n    interior: XcmV3Junctions.X1(\n      XcmV3Junction.Parachain(popParaID), // Destination is the Pop Network parachain\n    ),\n  }),\n  beneficiary: XcmVersionedLocation.V3({\n    parents: 0,\n    interior: XcmV3Junctions.X1(\n      XcmV3Junction.AccountId32({\n        // Beneficiary address on Pop Network\n        network: undefined,\n        id: idBeneficiary,\n      }),\n    ),\n  }),\n  assets: XcmVersionedAssets.V3([\n    {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 0,\n        interior: XcmV3Junctions.Here(), // Native asset from the sender. In this case PAS\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(120000000000n), // Asset amount to transfer\n    },\n  ]),\n  fee_asset_item: 0, // Asset used to pay transaction fees\n  weight_limit: XcmV3WeightLimit.Unlimited(), // No weight limit on transaction\n});\n\n// Execute the dry run call to simulate the transaction\nconst dryRunResult = await paseoApi.apis.DryRunApi.dry_run_call(\n  origin,\n  tx.decodedCall,\n);\n\n// Extract the data from the dry run result\nconst {\n  execution_result: executionResult,\n  emitted_events: emmittedEvents,\n  local_xcm: localXcm,\n  forwarded_xcms: forwardedXcms,\n} = dryRunResult.value;\n\n// Extract the XCM generated by this call\nconst xcmsToPop = forwardedXcms.find(\n  ([location, _]) =>\n    location.type === 'V4' &&\n    location.value.parents === 0 &&\n    location.value.interior.type === 'X1' &&\n    location.value.interior.value.type === 'Parachain' &&\n    location.value.interior.value.value === popParaID, // Pop network's ParaID\n);\nconst destination = xcmsToPop[0];\nconst remoteXcm = xcmsToPop[1][0];\n\n// Print the results\nconst resultObject = {\n  execution_result: executionResult,\n  emitted_events: emmittedEvents,\n  local_xcm: localXcm,\n  destination: destination,\n  remote_xcm: remoteXcm,\n};\n\nconsole.dir(resultObject, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <pre>\n    {\n      execution_result: {\n        success: true,\n        value: {\n          actual_weight: undefined,\n          pays_fee: { type: 'Yes', value: undefined }\n        }\n      },\n      emitted_events: [\n        {\n          type: 'Balances',\n          value: {\n            type: 'Transfer',\n            value: {\n              from: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              to: '13YMK2ePPKQeW7ynqLozB65WYjMnNgffQ9uR4AzyGmqnKeLq',\n              amount: 120000000000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: { type: 'Issued', value: { amount: 0n } }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'Attempted',\n            value: {\n              outcome: {\n                type: 'Complete',\n                value: { used: { ref_time: 251861000n, proof_size: 6196n } }\n              }\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Burned',\n            value: {\n              who: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              amount: 397000000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Minted',\n            value: {\n              who: '13UVJyLnbVp9RBZYFwFGyDvVd1y27Tt8tkntv6Q7JVPhFsTB',\n              amount: 397000000n\n            }\n          }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'FeesPaid',\n            value: {\n              paying: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: { type: 'Polkadot', value: undefined },\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              },\n              fees: [\n                {\n                  id: {\n                    parents: 0,\n                    interior: { type: 'Here', value: undefined }\n                  },\n                  fun: { type: 'Fungible', value: 397000000n }\n                }\n              ]\n            }\n          }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'Sent',\n            value: {\n              origin: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: { type: 'Polkadot', value: undefined },\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              },\n              destination: {\n                parents: 0,\n                interior: { type: 'X1', value: { type: 'Parachain', value: 4001 } }\n              },\n              message: [\n                {\n                  type: 'ReserveAssetDeposited',\n                  value: [\n                    {\n                      id: {\n                        parents: 1,\n                        interior: { type: 'Here', value: undefined }\n                      },\n                      fun: { type: 'Fungible', value: 120000000000n }\n                    }\n                  ]\n                },\n                { type: 'ClearOrigin', value: undefined },\n                {\n                  type: 'BuyExecution',\n                  value: {\n                    fees: {\n                      id: {\n                        parents: 1,\n                        interior: { type: 'Here', value: undefined }\n                      },\n                      fun: { type: 'Fungible', value: 120000000000n }\n                    },\n                    weight_limit: { type: 'Unlimited', value: undefined }\n                  }\n                },\n                {\n                  type: 'DepositAsset',\n                  value: {\n                    assets: {\n                      type: 'Wild',\n                      value: { type: 'AllCounted', value: 1 }\n                    },\n                    beneficiary: {\n                      parents: 0,\n                      interior: {\n                        type: 'X1',\n                        value: {\n                          type: 'AccountId32',\n                          value: {\n                            network: undefined,\n                            id: FixedSizeBinary {\n                              asText: [Function (anonymous)],\n                              asHex: [Function (anonymous)],\n                              asOpaqueHex: [Function (anonymous)],\n                              asBytes: [Function (anonymous)],\n                              asOpaqueBytes: [Function (anonymous)]\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              ],\n              message_id: FixedSizeBinary {\n                asText: [Function (anonymous)],\n                asHex: [Function (anonymous)],\n                asOpaqueHex: [Function (anonymous)],\n                asBytes: [Function (anonymous)],\n                asOpaqueBytes: [Function (anonymous)]\n              }\n            }\n          }\n        }\n      ],\n      local_xcm: undefined,\n      destination: {\n        type: 'V4',\n        value: {\n          parents: 0,\n          interior: { type: 'X1', value: { type: 'Parachain', value: 4001 } }\n        }\n      },\n      remote_xcm: {\n        type: 'V3',\n        value: [\n          {\n            type: 'ReserveAssetDeposited',\n            value: [\n              {\n                id: {\n                  type: 'Concrete',\n                  value: {\n                    parents: 1,\n                    interior: { type: 'Here', value: undefined }\n                  }\n                },\n                fun: { type: 'Fungible', value: 120000000000n }\n              }\n            ]\n          },\n          { type: 'ClearOrigin', value: undefined },\n          {\n            type: 'BuyExecution',\n            value: {\n              fees: {\n                id: {\n                  type: 'Concrete',\n                  value: {\n                    parents: 1,\n                    interior: { type: 'Here', value: undefined }\n                  }\n                },\n                fun: { type: 'Fungible', value: 120000000000n }\n              },\n              weight_limit: { type: 'Unlimited', value: undefined }\n            }\n          },\n          {\n            type: 'DepositAsset',\n            value: {\n              assets: { type: 'Wild', value: { type: 'AllCounted', value: 1 } },\n              beneficiary: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: undefined,\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          {\n            type: 'SetTopic',\n            value: FixedSizeBinary {\n              asText: [Function (anonymous)],\n              asHex: [Function (anonymous)],\n              asOpaqueHex: [Function (anonymous)],\n              asBytes: [Function (anonymous)],\n              asOpaqueBytes: [Function (anonymous)]\n            }\n          }\n        ]\n      }\n    }      \n  </pre>\n</div>\n\n                ...\n    -<div id=\"termynal\" data-termynal>\n  <pre>\n    {\n      execution_result: {\n        success: true,\n        value: {\n          actual_weight: undefined,\n          pays_fee: { type: 'Yes', value: undefined }\n        }\n      },\n      emitted_events: [\n        {\n          type: 'Balances',\n          value: {\n            type: 'Transfer',\n            value: {\n              from: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              to: '13YMK2ePPKQeW7ynqLozB65WYjMnNgffQ9uR4AzyGmqnKeLq',\n              amount: 120000000000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: { type: 'Issued', value: { amount: 0n } }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'Attempted',\n            value: {\n              outcome: {\n                type: 'Complete',\n                value: { used: { ref_time: 251861000n, proof_size: 6196n } }\n              }\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Burned',\n            value: {\n              who: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              amount: 397000000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Minted',\n            value: {\n              who: '13UVJyLnbVp9RBZYFwFGyDvVd1y27Tt8tkntv6Q7JVPhFsTB',\n              amount: 397000000n\n            }\n          }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'FeesPaid',\n            value: {\n              paying: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: { type: 'Polkadot', value: undefined },\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              },\n              fees: [\n                {\n                  id: {\n                    parents: 0,\n                    interior: { type: 'Here', value: undefined }\n                  },\n                  fun: { type: 'Fungible', value: 397000000n }\n                }\n              ]\n            }\n          }\n        },\n        {\n          type: 'XcmPallet',\n          value: {\n            type: 'Sent',\n            value: {\n              origin: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: { type: 'Polkadot', value: undefined },\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              },\n              destination: {\n                parents: 0,\n                interior: { type: 'X1', value: { type: 'Parachain', value: 4001 } }\n              },\n              message: [\n                {\n                  type: 'ReserveAssetDeposited',\n                  value: [\n                    {\n                      id: {\n                        parents: 1,\n                        interior: { type: 'Here', value: undefined }\n                      },\n                      fun: { type: 'Fungible', value: 120000000000n }\n                    }\n                  ]\n                },\n                { type: 'ClearOrigin', value: undefined },\n                {\n                  type: 'BuyExecution',\n                  value: {\n                    fees: {\n                      id: {\n                        parents: 1,\n                        interior: { type: 'Here', value: undefined }\n                      },\n                      fun: { type: 'Fungible', value: 120000000000n }\n                    },\n                    weight_limit: { type: 'Unlimited', value: undefined }\n                  }\n                },\n                {\n                  type: 'DepositAsset',\n                  value: {\n                    assets: {\n                      type: 'Wild',\n                      value: { type: 'AllCounted', value: 1 }\n                    },\n                    beneficiary: {\n                      parents: 0,\n                      interior: {\n                        type: 'X1',\n                        value: {\n                          type: 'AccountId32',\n                          value: {\n                            network: undefined,\n                            id: FixedSizeBinary {\n                              asText: [Function (anonymous)],\n                              asHex: [Function (anonymous)],\n                              asOpaqueHex: [Function (anonymous)],\n                              asBytes: [Function (anonymous)],\n                              asOpaqueBytes: [Function (anonymous)]\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              ],\n              message_id: FixedSizeBinary {\n                asText: [Function (anonymous)],\n                asHex: [Function (anonymous)],\n                asOpaqueHex: [Function (anonymous)],\n                asBytes: [Function (anonymous)],\n                asOpaqueBytes: [Function (anonymous)]\n              }\n            }\n          }\n        }\n      ],\n      local_xcm: undefined,\n      destination: {\n        type: 'V4',\n        value: {\n          parents: 0,\n          interior: { type: 'X1', value: { type: 'Parachain', value: 4001 } }\n        }\n      },\n      remote_xcm: {\n        type: 'V3',\n        value: [\n          {\n            type: 'ReserveAssetDeposited',\n            value: [\n              {\n                id: {\n                  type: 'Concrete',\n                  value: {\n                    parents: 1,\n                    interior: { type: 'Here', value: undefined }\n                  }\n                },\n                fun: { type: 'Fungible', value: 120000000000n }\n              }\n            ]\n          },\n          { type: 'ClearOrigin', value: undefined },\n          {\n            type: 'BuyExecution',\n            value: {\n              fees: {\n                id: {\n                  type: 'Concrete',\n                  value: {\n                    parents: 1,\n                    interior: { type: 'Here', value: undefined }\n                  }\n                },\n                fun: { type: 'Fungible', value: 120000000000n }\n              },\n              weight_limit: { type: 'Unlimited', value: undefined }\n            }\n          },\n          {\n            type: 'DepositAsset',\n            value: {\n              assets: { type: 'Wild', value: { type: 'AllCounted', value: 1 } },\n              beneficiary: {\n                parents: 0,\n                interior: {\n                  type: 'X1',\n                  value: {\n                    type: 'AccountId32',\n                    value: {\n                      network: undefined,\n                      id: FixedSizeBinary {\n                        asText: [Function (anonymous)],\n                        asHex: [Function (anonymous)],\n                        asOpaqueHex: [Function (anonymous)],\n                        asBytes: [Function (anonymous)],\n                        asOpaqueBytes: [Function (anonymous)]\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          {\n            type: 'SetTopic',\n            value: FixedSizeBinary {\n              asText: [Function (anonymous)],\n              asHex: [Function (anonymous)],\n              asOpaqueHex: [Function (anonymous)],\n              asBytes: [Function (anonymous)],\n              asOpaqueBytes: [Function (anonymous)]\n            }\n          }\n        ]\n      }\n    }      \n  </pre>\n</div>\n\n\n    ---\n\n### Dry Run XCM\n\nThis API allows the direct dry-run of an xcm message instead of an extrinsic one, checks if it will execute successfully, and determines what other xcm messages will be forwarded to other chains.\n\n```rust\n-fn dry_run_xcm(origin_location: VersionedLocation, xcm: VersionedXcm<Call>) -> Result<XcmDryRunEffects<Event>, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `origin_location` ++\"VersionedLocation\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    The location of the origin that will execute the xcm message.\n\n    ---\n\n    `xcm` ++\"VersionedXcm<Call>\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    A versioned XCM message.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<XcmDryRunEffects<Event>, Error>\"++\n\n    Effects of dry-running an extrinsic. If an error occurs, it is returned instead of the effects.\n\n    ??? child \"Type `XcmDryRunEffects<Event>`\"\n\n        `execution_result` ++\"DispatchResultWithPostInfo\"++\n\n        The result of executing the extrinsic.\n\n        ---\n\n        `emitted_events` ++\"Vec<Event>\"++\n\n        The list of events fired by the extrinsic.\n\n        ---\n\n        `forwarded_xcms` ++\"Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>\"++\n\n        The list of XCMs that were queued for sending.\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n\n    ---\n\n??? interface \"Example\"\n\n    This example demonstrates how to simulate a [teleport asset transfer](https://wiki.polkadot.com/learn/learn-xcm-usecases/#asset-teleportation){target=\\_blank} from the Paseo network to the Paseo Asset Hub parachain. The code shows how to test and verify the received XCM message's behavior in the destination chain through a dry run on the live network.\n\n    Replace `INSERT_USER_ADDRESS` with your SS58 address before running the script.\n\n     ***Usage with PAPI***\n\n    ```js\n    -import { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\nimport {\n  XcmVersionedXcm,\n  paseoAssetHub,\n  XcmVersionedLocation,\n  XcmV3Junction,\n  XcmV3Junctions,\n  XcmV3WeightLimit,\n  XcmV3MultiassetFungibility,\n  XcmV3MultiassetAssetId,\n  XcmV3Instruction,\n  XcmV3MultiassetMultiAssetFilter,\n  XcmV3MultiassetWildMultiAsset,\n} from '@polkadot-api/descriptors';\nimport { Binary } from 'polkadot-api';\nimport { ss58Decode } from '@polkadot-labs/hdkd-helpers';\n\n// Connect to Paseo Asset Hub\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://asset-hub-paseo-rpc.dwellir.com')),\n);\n\nconst paseoAssetHubApi = client.getTypedApi(paseoAssetHub);\n\nconst userAddress = 'INSERT_USER_ADDRESS';\nconst userPublicKey = ss58Decode(userAddress)[0];\nconst idBeneficiary = Binary.fromBytes(userPublicKey);\n\n// Define the origin\nconst origin = XcmVersionedLocation.V3({\n  parents: 1,\n  interior: XcmV3Junctions.Here(),\n});\n\n// Define a xcm message comming from the Paseo relay chain to Asset Hub to Teleport some tokens\nconst xcm = XcmVersionedXcm.V3([\n  XcmV3Instruction.ReceiveTeleportedAsset([\n    {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(12000000000n),\n    },\n  ]),\n  XcmV3Instruction.ClearOrigin(),\n  XcmV3Instruction.BuyExecution({\n    fees: {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(BigInt(12000000000n)),\n    },\n    weight_limit: XcmV3WeightLimit.Unlimited(),\n  }),\n  XcmV3Instruction.DepositAsset({\n    assets: XcmV3MultiassetMultiAssetFilter.Wild(\n      XcmV3MultiassetWildMultiAsset.All(),\n    ),\n    beneficiary: {\n      parents: 0,\n      interior: XcmV3Junctions.X1(\n        XcmV3Junction.AccountId32({\n          network: undefined,\n          id: idBeneficiary,\n        }),\n      ),\n    },\n  }),\n]);\n\n// Execute dry run xcm\nconst dryRunResult = await paseoAssetHubApi.apis.DryRunApi.dry_run_xcm(\n  origin,\n  xcm,\n);\n\n// Print the results\nconsole.dir(dryRunResult.value, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <pre>\n    {\n      execution_result: {\n        type: 'Complete',\n        value: { used: { ref_time: 15574200000n, proof_size: 359300n } }\n      },\n      emitted_events: [\n        {\n          type: 'System',\n          value: {\n            type: 'NewAccount',\n            value: { account: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET' }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Endowed',\n            value: {\n              account: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              free_balance: 10203500000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Minted',\n            value: {\n              who: '12pGtwHPL4tUAUcyeCoJ783NKRspztpWmXv4uxYRwiEnYNET',\n              amount: 10203500000n\n            }\n          }\n        },\n        {\n          type: 'Balances',\n          value: { type: 'Issued', value: { amount: 1796500000n } }\n        },\n        {\n          type: 'Balances',\n          value: {\n            type: 'Deposit',\n            value: {\n              who: '13UVJyLgBASGhE2ok3TvxUfaQBGUt88JCcdYjHvUhvQkFTTx',\n              amount: 1796500000n\n            }\n          }\n        }\n      ],\n      forwarded_xcms: [\n        [\n          {\n            type: 'V4',\n            value: { parents: 1, interior: { type: 'Here', value: undefined } }\n          },\n          []\n        ]\n      ]\n    }\n  </pre>\n</div>\n\n\n    ---\n\n## XCM Payment API\n\nThe [XCM Payment API](https://paritytech.github.io/polkadot-sdk/master/xcm_runtime_apis/fees/trait.XcmPaymentApi.html){target=\\_blank} provides a standardized way to determine the costs and payment options for executing XCM messages. Specifically, it enables clients to:\n\n- Retrieve the [weight](/polkadot-protocol/glossary/#weight) required to execute an XCM message.\n- Obtain a list of acceptable `AssetIds` for paying execution fees.\n- Calculate the cost of the weight in a specified `AssetId`.\n- Estimate the fees for XCM message delivery.\n\nThis API eliminates the need for clients to guess execution fees or identify acceptable assets manually. Instead, clients can query the list of supported asset IDs formatted according to the XCM version they understand. With this information, they can weigh the XCM program they intend to execute and convert the computed weight into its cost using one of the acceptable assets.\n\nTo use the API effectively, the client must already know the XCM program to be executed and the chains involved in the program's execution.\n\n### Query Acceptable Payment Assets\n\nRetrieves the list of assets that are acceptable for paying fees when using a specific XCM version\n\n```rust\n-fn query_acceptable_payment_assets(xcm_version: Version) -> Result<Vec<VersionedAssetId>, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `xcm_version` ++\"Version\"++ <span class=\"required\" markdown>++\"required\"++</span>\n\n    Specifies the XCM version that will be used to send the XCM message.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<Vec<VersionedAssetId>, Error>\"++\n\n    A list of acceptable payment assets. Each asset is provided in a versioned format (`VersionedAssetId`) that matches the specified XCM version. If an error occurs, it is returned instead of the asset list.\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n        - **`WeightNotComputable`**: XCM message weight calculation failed.\n        - **`UnhandledXcmVersion`**: XCM version not able to be handled.\n        - **`AssetNotFound`**: The given asset is not handled as a fee asset.\n        - **`Unroutable`**: Destination is known to be unroutable.\n\n    ---\n\n??? interface \"Example\"\n\n    This example demonstrates how to query the acceptable payment assets for executing XCM messages on the Paseo Asset Hub network using XCM version 3.\n\n    ***Usage with PAPI***\n\n    ```js\n    -import { paseoAssetHub } from '@polkadot-api/descriptors';\nimport { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\n\n// Connect to the polkadot relay chain\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://asset-hub-paseo-rpc.dwellir.com')),\n);\n\nconst paseoAssetHubApi = client.getTypedApi(paseoAssetHub);\n\n// Define the xcm version to use\nconst xcmVersion = 3;\n\n// Execute the runtime call to query the assets\nconst result =\n  await paseoAssetHubApi.apis.XcmPaymentApi.query_acceptable_payment_assets(\n    xcmVersion,\n  );\n\n// Print the assets\nconsole.dir(result.value, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <pre>\n    [\n      {\n        type: 'V3',\n        value: {\n          type: 'Concrete',\n          value: { parents: 1, interior: { type: 'Here', value: undefined } }\n        }\n      }\n    ]\n  </pre>\n</div>\n\n\n    ---\n\n### Query XCM Weight\n\nCalculates the weight required to execute a given XCM message. It is useful for estimating the execution cost of a cross-chain message in the destination chain before sending it.\n\n```rust\n-fn query_xcm_weight(message: VersionedXcm<()>) -> Result<Weight, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `message` ++\"VersionedXcm<()>\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    A versioned XCM message whose execution weight is being queried.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<Weight, Error>\"++\n    \n    The calculated weight required to execute the provided XCM message. If the calculation fails, an error is returned instead.\n\n    ??? child \"Type `Weight`\"\n\n        `ref_time` ++\"u64\"++\n\n        The weight of computational time used based on some reference hardware.\n\n        ---\n\n        `proof_size` ++\"u64\"++\n\n        The weight of storage space used by proof of validity.\n\n        ---\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n        - **`WeightNotComputable`**: XCM message weight calculation failed.\n        - **`UnhandledXcmVersion`**: XCM version not able to be handled.\n        - **`AssetNotFound`**: The given asset is not handled as a fee asset.\n        - **`Unroutable`**: Destination is known to be unroutable.\n\n    ---\n\n??? interface \"Example\"\n\n    This example demonstrates how to calculate the weight needed to execute a [teleport transfer](https://wiki.polkadot.com/learn/learn-xcm-usecases/#asset-teleportation){target=\\_blank} from the Paseo network to the Paseo Asset Hub parachain using the XCM Payment API. The result shows the required weight in terms of reference time and proof size needed in the destination chain.\n\n    Replace `INSERT_USER_ADDRESS` with your SS58 address before running the script.\n\n    ***Usage with PAPI***\n\n    ```js\n    -import { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\nimport {\n  XcmVersionedXcm,\n  paseoAssetHub,\n  XcmV3Junction,\n  XcmV3Junctions,\n  XcmV3WeightLimit,\n  XcmV3MultiassetFungibility,\n  XcmV3MultiassetAssetId,\n  XcmV3Instruction,\n  XcmV3MultiassetMultiAssetFilter,\n  XcmV3MultiassetWildMultiAsset,\n} from '@polkadot-api/descriptors';\nimport { Binary } from 'polkadot-api';\nimport { ss58Decode } from '@polkadot-labs/hdkd-helpers';\n\n// Connect to Paseo Asset Hub\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://asset-hub-paseo-rpc.dwellir.com')),\n);\n\nconst paseoAssetHubApi = client.getTypedApi(paseoAssetHub);\n\nconst userAddress = 'INSERT_USER_ADDRESS';\nconst userPublicKey = ss58Decode(userAddress)[0];\nconst idBeneficiary = Binary.fromBytes(userPublicKey);\n\n// Define a xcm message comming from the Paseo relay chain to Asset Hub to Teleport some tokens\nconst xcm = XcmVersionedXcm.V3([\n  XcmV3Instruction.ReceiveTeleportedAsset([\n    {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(12000000000n),\n    },\n  ]),\n  XcmV3Instruction.ClearOrigin(),\n  XcmV3Instruction.BuyExecution({\n    fees: {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(BigInt(12000000000n)),\n    },\n    weight_limit: XcmV3WeightLimit.Unlimited(),\n  }),\n  XcmV3Instruction.DepositAsset({\n    assets: XcmV3MultiassetMultiAssetFilter.Wild(\n      XcmV3MultiassetWildMultiAsset.All(),\n    ),\n    beneficiary: {\n      parents: 0,\n      interior: XcmV3Junctions.X1(\n        XcmV3Junction.AccountId32({\n          network: undefined,\n          id: idBeneficiary,\n        }),\n      ),\n    },\n  }),\n]);\n\n// Execute the query weight runtime call\nconst result = await paseoAssetHubApi.apis.XcmPaymentApi.query_xcm_weight(xcm);\n\n// Print the results\nconsole.dir(result.value, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <span data-ty>{ ref_time: 15574200000n, proof_size: 359300n }</span>\n</div>\n\n\n    ---\n\n### Query Weight to Asset Fee\n\nConverts a given weight into the corresponding fee for a specified `AssetId`. It allows clients to determine the cost of execution in terms of the desired asset.\n\n```rust\n-fn query_weight_to_asset_fee(weight: Weight, asset: VersionedAssetId) -> Result<u128, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `weight` ++\"Weight\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    The execution weight to be converted into a fee.\n\n    ??? child \"Type `Weight`\"\n\n        `ref_time` ++\"u64\"++\n\n        The weight of computational time used based on some reference hardware.\n\n        ---\n\n        `proof_size` ++\"u64\"++\n\n        The weight of storage space used by proof of validity.\n\n        ---\n\n    ---\n\n    `asset` ++\"VersionedAssetId\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    The asset in which the fee will be calculated. This must be a versioned asset ID compatible with the runtime.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<u128, Error>\"++\n    \n    The fee needed to pay for the execution for the given `AssetId.`\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n        - **`WeightNotComputable`**: XCM message weight calculation failed.\n        - **`UnhandledXcmVersion`**: XCM version not able to be handled.\n        - **`AssetNotFound`**: The given asset is not handled as a fee asset.\n        - **`Unroutable`**: Destination is known to be unroutable.\n\n    ---\n\n??? interface \"Example\"\n\n    This example demonstrates how to calculate the fee for a given execution weight using a specific versioned asset ID (PAS token) on Paseo Asset Hub.\n\n    ***Usage with PAPI***\n\n    ```js\n    -import { paseoAssetHub } from '@polkadot-api/descriptors';\nimport { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\n\n// Connect to the polkadot relay chain\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://asset-hub-paseo-rpc.dwellir.com')),\n);\n\nconst paseoAssetHubApi = client.getTypedApi(paseoAssetHub);\n\n// Define the weight to convert to fee\nconst weight = { ref_time: 15574200000n, proof_size: 359300n };\n\n// Define the versioned asset id\nconst versionedAssetId = {\n  type: 'V4',\n  value: { parents: 1, interior: { type: 'Here', value: undefined } },\n};\n\n// Execute the runtime call to convert the weight to fee\nconst result =\n  await paseoAssetHubApi.apis.XcmPaymentApi.query_weight_to_asset_fee(\n    weight,\n    versionedAssetId,\n  );\n\n// Print the fee\nconsole.dir(result.value, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <span data-ty>1796500000n</span>\n</div>\n\n    ---\n\n### Query Delivery Fees\n\nRetrieves the delivery fees for sending a specific XCM message to a designated destination. The fees are always returned in a specific asset defined by the destination chain.\n\n```rust\n-fn query_delivery_fees(destination: VersionedLocation, message: VersionedXcm<()>) -> Result<VersionedAssets, Error>;\n```\n\n??? interface \"Input parameters\"\n\n    `destination` ++\"VersionedLocation\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    The target location where the message will be sent. Fees may vary depending on the destination, as different destinations often have unique fee structures and sender mechanisms.\n\n    ---\n\n    `message` ++\"VersionedXcm<()>\"++ <span class=\"required\" markdown>++\"required\"++</span>\n    \n    The XCM message to be sent. The delivery fees are calculated based on the message's content and size, which can influence the cost.\n\n    ---\n\n??? interface \"Output parameters\"\n\n    ++\"Result<VersionedAssets, Error>\"++\n    \n    The calculated delivery fees expressed in a specific asset supported by the destination chain. If an error occurs during the query, it returns an error instead.\n\n    ??? child \"Type `Error`\"\n\n        Enum:\n\n        - **`Unimplemented`**: An API part is unsupported.\n        - **`VersionedConversionFailed`**: Converting a versioned data structure from one version to another failed.\n        - **`WeightNotComputable`**: XCM message weight calculation failed.\n        - **`UnhandledXcmVersion`**: XCM version not able to be handled.\n        - **`AssetNotFound`**: The given asset is not handled as a fee asset.\n        - **`Unroutable`**: Destination is known to be unroutable.\n\n    ---\n\n??? interface \"Example\"\n\n    This example demonstrates how to query the delivery fees for sending an XCM message from Paseo to Paseo Asset Hub.\n\n    Replace `INSERT_USER_ADDRESS` with your SS58 address before running the script.\n\n    ***Usage with PAPI***\n\n    ```js\n    -import { createClient } from 'polkadot-api';\nimport { getWsProvider } from 'polkadot-api/ws-provider/web';\nimport { withPolkadotSdkCompat } from 'polkadot-api/polkadot-sdk-compat';\nimport {\n  XcmVersionedXcm,\n  paseo,\n  XcmVersionedLocation,\n  XcmV3Junction,\n  XcmV3Junctions,\n  XcmV3WeightLimit,\n  XcmV3MultiassetFungibility,\n  XcmV3MultiassetAssetId,\n  XcmV3Instruction,\n  XcmV3MultiassetMultiAssetFilter,\n  XcmV3MultiassetWildMultiAsset,\n} from '@polkadot-api/descriptors';\nimport { Binary } from 'polkadot-api';\nimport { ss58Decode } from '@polkadot-labs/hdkd-helpers';\n\nconst client = createClient(\n  withPolkadotSdkCompat(getWsProvider('wss://paseo-rpc.dwellir.com')),\n);\n\nconst paseoApi = client.getTypedApi(paseo);\n\nconst paseoAssetHubParaID = 1000;\nconst userAddress = 'INSERT_USER_ADDRESS';\nconst userPublicKey = ss58Decode(userAddress)[0];\nconst idBeneficiary = Binary.fromBytes(userPublicKey);\n\n// Define the destination\nconst destination = XcmVersionedLocation.V3({\n  parents: 0,\n  interior: XcmV3Junctions.X1(XcmV3Junction.Parachain(paseoAssetHubParaID)),\n});\n\n// Define the xcm message that will be sent to the destination\nconst xcm = XcmVersionedXcm.V3([\n  XcmV3Instruction.ReceiveTeleportedAsset([\n    {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(12000000000n),\n    },\n  ]),\n  XcmV3Instruction.ClearOrigin(),\n  XcmV3Instruction.BuyExecution({\n    fees: {\n      id: XcmV3MultiassetAssetId.Concrete({\n        parents: 1,\n        interior: XcmV3Junctions.Here(),\n      }),\n      fun: XcmV3MultiassetFungibility.Fungible(BigInt(12000000000n)),\n    },\n    weight_limit: XcmV3WeightLimit.Unlimited(),\n  }),\n  XcmV3Instruction.DepositAsset({\n    assets: XcmV3MultiassetMultiAssetFilter.Wild(\n      XcmV3MultiassetWildMultiAsset.All(),\n    ),\n    beneficiary: {\n      parents: 0,\n      interior: XcmV3Junctions.X1(\n        XcmV3Junction.AccountId32({\n          network: undefined,\n          id: idBeneficiary,\n        }),\n      ),\n    },\n  }),\n]);\n\n// Execute the query delivery fees runtime call\nconst result = await paseoApi.apis.XcmPaymentApi.query_delivery_fees(\n  destination,\n  xcm,\n);\n\n// Print the results\nconsole.dir(result.value, { depth: null });\n\nclient.destroy();\n\n    ```\n\n    ***Output***\n\n    -<div id=\"termynal\" data-termynal>\n  <pre>\n    {\n      type: 'V3',\n      value: [\n        {\n          id: {\n            type: 'Concrete',\n            value: { parents: 0, interior: { type: 'Here', value: undefined } }\n          },\n          fun: { type: 'Fungible', value: 396000000n }\n        }\n      ]\n    }\n  </pre>\n</div>\n\n    ---\n"}
