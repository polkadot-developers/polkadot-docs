
//! Autogenerated weights for `custom_pallet`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-01-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `192.168.1.4`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/parachain-template-runtime/parachain_template_runtime.compact.compressed.wasm
// --pallet
// custom_pallet
// --extrinsic
// 
// --template
// ./pallets/benchmarking/frame-weight-template.hbs
// --output
// ./pallets/custom-pallet/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `custom_pallet`.
pub trait WeightInfo {
	fn set_counter_value() -> Weight;
	fn increment() -> Weight;
	fn decrement() -> Weight;
}

/// Weights for `custom_pallet` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CustomPallet::CounterValue` (r:0 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_counter_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CustomPallet::CounterValue` (r:1 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CustomPallet::UserInteractions` (r:1 w:1)
	/// Proof: `CustomPallet::UserInteractions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `3534`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3534)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CustomPallet::CounterValue` (r:1 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CustomPallet::UserInteractions` (r:1 w:1)
	/// Proof: `CustomPallet::UserInteractions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn decrement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `3534`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3534)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CustomPallet::CounterValue` (r:0 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_counter_value() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CustomPallet::CounterValue` (r:1 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CustomPallet::UserInteractions` (r:1 w:1)
	/// Proof: `CustomPallet::UserInteractions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn increment() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `3534`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3534)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CustomPallet::CounterValue` (r:1 w:1)
	/// Proof: `CustomPallet::CounterValue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `CustomPallet::UserInteractions` (r:1 w:1)
	/// Proof: `CustomPallet::UserInteractions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn decrement() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `69`
		//  Estimated: `3534`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3534)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
